{"version":3,"sources":["views/AddUser/AddUser.jsx","views/AddUser/index.js","components/WebBreadcrumbNew/WebBreadcrumbNew.jsx","components/WebBreadcrumbNew/index.js"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","Option","MerchantDetail","props","useState","id","fullName","displayName","logo","socialType","state","setState","useForm","form","name","value","language","useEffect","className","WebBreadcrumbNew","title","style","paddingTop","initialValues","remember","onFinish","values","confirmModal","window","confirm","params","email","APICreateUser","userJson","JSON","stringify","then","resp","history","push","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","type","Group","onChange","target","defaultValue","allowClear","map","item","key","htmlType","marginLeft","AddUser","WebBreadcrumb","arr","src","Aset","alt"],"mappings":"+XAKMA,EAAS,CACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,KAGRE,EAAa,CACfD,WAAY,CACRE,OAAQ,GACRH,KAAM,KAGNI,E,IAAAA,OA6IOC,EA3IQ,SAAAC,GAAU,IAAD,EACFC,mBAAS,CAC/BC,GAAI,KACJC,SAAU,MACVC,YAAa,UACbC,KAAM,GACNC,WAAY,IANY,mBACrBC,EADqB,KACdC,EADc,OAQb,IAAKC,UAAbC,EARqB,sBASIT,mBAAS,CACrC,CAAEU,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,SAAUC,MAAO,UACzB,CAAED,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,SAAUC,MAAO,UACzB,CAAED,KAAM,aAAcC,MAAO,gBAdL,mBASrBC,EATqB,UA+C5B,OAFAC,qBAAU,cAAU,IAGhB,uBAAQC,UAAU,yBACd,6BACI,kBAACC,EAAA,EAAD,CAAkBC,MAAM,qBAE5B,yBAAKF,UAAU,yBAAyBb,GAAG,WAAWgB,MAAO,CAAEC,WAAY,SACvE,2BACI,uBAAKzB,KAAM,IACP,uCACQF,EADR,CAEImB,KAAK,QACLS,cAAe,CACXC,UAAU,GAEdX,KAAMA,EACNY,SA7CP,SAAAC,GACb,IAAIC,EAAeC,OAAOC,QAAQ,kCAC9BC,EAAM,aAENC,MAAOL,EAAOK,MACdf,SAAUU,EAAOV,UACdU,GAEa,GAAhBC,GACAK,YAAc,CACVC,SAAUC,KAAKC,UAAUL,KAC1BM,MAAK,SAAAC,GACJlC,EAAMmC,QAAQC,KAAK,wBAkCPC,eA7BD,SAAAC,GACnBC,QAAQC,IAAI,UAAWF,MA6BH,2BACI,uBAAK5C,KAAM,IACP,sBAAM+C,KAAN,CACIC,MAAM,QACN/B,KAAK,QACLgC,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,oBAEb,CACIC,KAAM,QACND,QAAS,kCAGjB,+BAIZ,2BACI,uBAAKnD,KAAM,IACP,sBAAM+C,KAAN,CAAWC,MAAM,sBAAsB/B,KAAK,uBACxC,sBAAOoC,MAAP,CAAaC,SAhD/B,SAAApC,GACdJ,EAAS,2BACFD,GADC,IAEJD,WAAYM,EAAMqC,OAAOrC,UA6CqCsC,aAAc3C,EAAMD,YAClD,uBAAOM,MAAO,GAAd,aACA,uBAAOA,MAAO,GAAd,eAKK,GAApBL,EAAMD,WACH,2BACI,uBAAKZ,KAAM,IACP,sBAAM+C,KAAN,CAAWE,MAAO,CAAC,CAAEC,UAAU,IAASF,MAAM,YAAY/B,KAAK,aAC3D,+BAIQ,GAApBJ,EAAMD,WACN,2BACI,uBAAKZ,KAAM,IACP,sBAAM+C,KAAN,CAAWE,MAAO,CAAC,CAAEC,UAAU,IAASF,MAAM,SAAS/B,KAAK,UACxD,+BAIZ,KACJ,uBAAKjB,KAAM,IACP,sBAAM+C,KAAN,CAAWC,MAAM,WAAW/B,KAAK,WAAWgC,MAAO,CAAC,CAAEC,UAAU,KAC5D,uBAAQO,YAAU,GACbtC,EAASuC,KAAI,SAAAC,GACV,OACI,kBAACvD,EAAD,CAAQwD,IAAKD,EAAKzC,MAAOA,MAAOyC,EAAK1C,MAChC0C,EAAK1C,YAQ9B,sBAAM8B,KAAS7C,EACX,6BACI,uBAAQkD,KAAK,UAAUS,SAAS,SAASrC,MAAO,CAAEsC,WAAY,SAA9D,kBClJrBC,a,kGCcAzC,EAVU,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxB,OACI,yBAAKF,UAAU,eACX,kBAAC2C,EAAA,EAAD,CAAeC,IAAK,CAAC1C,KACrB,4BAAKA,GACL,yBAAK2C,IAAKC,IAAM9C,UAAU,OAAO+C,IAAI,WCRlC9C","file":"static/js/44.f12ede1b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Layout, Row, Col, Select, Form, Input, Button, Radio } from 'antd'\nimport WebBreadcrumbNew from '@/components/WebBreadcrumbNew'\nimport '@/style/view-style/index.less'\nimport { APICreateUser } from '@/mapi'\nconst layout = {\n    labelCol: {\n        span: 8\n    },\n    wrapperCol: {\n        span: 16\n    }\n}\nconst tailLayout = {\n    wrapperCol: {\n        offset: 10,\n        span: 16\n    }\n}\nconst { Option } = Select\n\nconst MerchantDetail = props => {\n    const [state, setState] = useState({\n        id: '12',\n        fullName: 'hhh',\n        displayName: 'display',\n        logo: '',\n        socialType: 1\n    })\n    const [form] = Form.useForm()\n    const [language, setLanguage] = useState([\n        { name: 'English', value: 'English' },\n        { name: 'French', value: 'French' },\n        { name: 'Spanish', value: 'Spanish' },\n        { name: 'Polish', value: 'Polish' },\n        { name: 'Portuguese', value: 'Portuguese' }\n    ])\n\n    const onFinish = values => {\n        let confirmModal = window.confirm('Please confirm info is correct')\n        let params = {\n            // instagram: values.instagram,\n            email: values.email,\n            language: values.language,\n            ...values\n        }\n        if (confirmModal == true) {\n            APICreateUser({\n                userJson: JSON.stringify(params)\n            }).then(resp => {\n                props.history.push('/account/account')\n            })\n        }\n    }\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo)\n        // this.props.history.push(\"/index\");\n    }\n    const setTypeTo = value => {\n        setState({\n            ...state,\n            socialType: value.target.value\n        })\n    }\n\n    useEffect(() => {}, [])\n\n    return (\n        <Layout className='index animated fadeIn'>\n            <div>\n                <WebBreadcrumbNew title='Create account ' />\n            </div>\n            <div className='base-style base-detail' id='demoline' style={{ paddingTop: '50px' }}>\n                <Row>\n                    <Col span={24}>\n                        <Form\n                            {...layout}\n                            name='basic'\n                            initialValues={{\n                                remember: true\n                            }}\n                            form={form}\n                            onFinish={onFinish}\n                            onFinishFailed={onFinishFailed}>\n                            <Row>\n                                <Col span={12}>\n                                    <Form.Item\n                                        label='Email'\n                                        name='email'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Email is missing'\n                                            },\n                                            {\n                                                type: 'email',\n                                                message: 'Email is not validate email!'\n                                            }\n                                        ]}>\n                                        <Input />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={12}>\n                                    <Form.Item label='Social account type' name='social_account_type'>\n                                        <Radio.Group onChange={setTypeTo} defaultValue={state.socialType}>\n                                            <Radio value={1}>Instagram</Radio>\n                                            <Radio value={2}>Tik Tok</Radio>\n                                        </Radio.Group>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            {state.socialType == 1 ? (\n                                <Row>\n                                    <Col span={12}>\n                                        <Form.Item rules={[{ required: true }]} label='Instagram' name='instagram'>\n                                            <Input />\n                                        </Form.Item>\n                                    </Col>\n                                </Row>\n                            ) : state.socialType == 2 ? (\n                                <Row>\n                                    <Col span={12}>\n                                        <Form.Item rules={[{ required: true }]} label='TikTok' name='tiktok'>\n                                            <Input />\n                                        </Form.Item>\n                                    </Col>\n                                </Row>\n                            ) : null}\n                            <Col span={12}>\n                                <Form.Item label='Language' name='language' rules={[{ required: true }]}>\n                                    <Select allowClear>\n                                        {language.map(item => {\n                                            return (\n                                                <Option key={item.value} value={item.name}>\n                                                    {item.name}\n                                                </Option>\n                                            )\n                                        })}\n                                    </Select>\n                                </Form.Item>\n                            </Col>\n\n                            <Form.Item {...tailLayout}>\n                                <div>\n                                    <Button type='primary' htmlType='submit' style={{ marginLeft: '30px' }}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </div>\n        </Layout>\n    )\n}\n\nexport default MerchantDetail\n","import AddUser from './AddUser.jsx'\nexport default AddUser\n","import React, { Component, useEffect, useState } from 'react'\nimport { Table, Button, Modal, Checkbox } from 'antd'\nimport WebBreadcrumb from '../WebBreadcrumb'\nimport Aset from '@/imgs/aset1.png'\n\nconst WebBreadcrumbNew = ({ title }) => {\n    return (\n        <div className='web-bread-c'>\n            <WebBreadcrumb arr={[title]} />\n            <h3>{title}</h3>\n            <img src={Aset} className='aset' alt='aset' />\n        </div>\n    )\n}\n\nexport default WebBreadcrumbNew\n","import WebBreadcrumbNew from './WebBreadcrumbNew.jsx'\n\nexport default WebBreadcrumbNew\n"],"sourceRoot":""}