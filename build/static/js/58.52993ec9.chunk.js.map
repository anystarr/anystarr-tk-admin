{"version":3,"sources":["views/EmailTem/EmailTem.jsx","views/EmailTem/index.js"],"names":["Option","MonthPicker","RangePicker","columns","label","value","map","option","index","key","edit","Ondelete","confirm","temType","title","dataIndex","width","align","render","text","item","className","onClick","PushpinOutlined","style","color","fontSize","marginRight","searchLayout","labelCol","span","wrapperCol","SearchBar","props","useForm","form","name","onFinish","values","changeSearch","gutter","Item","Object","keys","textAlign","type","htmlType","margin","resetFields","DetailModal","visible","onCreate","onCancel","formData","disabled","useState","useEffect","length","setFieldsValue","okText","cancelText","onOk","validateFields","then","catch","info","console","log","rules","required","SearchTableView","list","pagination","current","pageSize","search","loading","state","setState","data","setTemType","APIGetTemplateType","resp","messageTypes","params","start_row","page_size","getList","APIGetEmailTem","JSON","stringify","getKeyList","total","pager","err","APICreateInvitecode","success","WebBreadcrumb","arr","src","Aset","alt","marginBottom","history","push","id","rowKey","record","dataSource","onChange","expandable","expandedRowRender","content","rowExpandable","bordered","rowSelection","scroll","scrollToFirstRowOnChange","x","EmailTem"],"mappings":"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","file":"static/js/58.52993ec9.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\nimport WebBreadcrumb from '@/components/WebBreadcrumb'\nimport { Layout, Row, Col, Tag, Table, Button, Modal, Input, Form, DatePicker, Select, message, Popconfirm } from 'antd'\nimport '@/style/view-style/table.less'\nimport {\n    APIgetList,\n    APIrewardApplicationList,\n    APIrewardApplicationHandle,\n    APIexportRewardRecord,\n    APIGetUserList,\n    APIGetInvitecodeList,\n    APICreateInvitecode,\n    APIGetCampaignsList,\n    APIGetMerchantList,\n    APIDeleteMerchant,\n    APIGetEmailTem,\n    APIGetEmailTemDetail,\n    APIGetTemplateType\n} from '@/mapi'\nimport { getKeyList } from '@/tools/action.js'\nimport { render } from 'react-dom'\nimport Aset from '@/imgs/aset1.png'\nimport { FormOutlined, MinusCircleOutlined, CheckCircleOutlined, PushpinOutlined } from '@ant-design/icons'\n\nconst { MonthPicker, RangePicker } = DatePicker\nconst { Option } = Select\n\nconst typeList = [\n    { label: '待处理', value: 'to_handle' },\n    { label: '已处理', value: 'handled' }\n]\n\nconst TypeOptions = typeList.map((option, index) => {\n    return (\n        <Option key={index} value={option.value}>\n            {option.label}\n        </Option>\n    )\n})\n\nconst getLocalTime = nS => {\n    return new Date(parseInt(nS) * 1000).toLocaleString().replace(/:\\d{1,2}$/, ' ')\n}\n\nconst columns = (edit, Ondelete, confirm, temType) => [\n    {\n        title: 'Action',\n        dataIndex: 'edit',\n        key: 'edit',\n        width: '100',\n        align: 'center',\n        render: (text, item) => (\n            <div>\n                <a\n                    className='action-btn'\n                    onClick={() => {\n                        edit(item)\n                    }}>\n                    Edit\n                </a>\n\n                {/* <Popconfirm\n                    title='Are you sure delete this merchant?'\n                    onConfirm={() => {\n                        confirm(item)\n                    }}\n                    okText='Yes'\n                    cancelText='No'>\n                    <a\n                        className='action-btn'\n                        onClick={() => {\n                        }}>\n                        Delete\n                    </a>\n                </Popconfirm> */}\n            </div>\n        )\n    },\n    {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n        width: '100',\n        align: 'center',\n        render: (text, item) => <span className='table-id'>{text}</span>\n    },\n    {\n        title: 'Type',\n        dataIndex: 'type',\n        key: 'type',\n        align: 'center',\n        width: '160',\n        render: (text, item) =>\n            text == 1 ? (\n                <span className='table-row-p'>\n                    <PushpinOutlined style={{ color: '#868AF6', fontSize: '13px', marginRight: '3px' }} />\n                    Verification code email\n                </span>\n            ) : text == 2 ? (\n                <span className='table-row-green'>\n                    <PushpinOutlined style={{ color: '#18BFA4', fontSize: '13px', marginRight: '3px' }} />\n                    welcome email\n                </span>\n            ) : text == 3 ? (\n                <span className='table-row-red'>\n                    <PushpinOutlined style={{ color: '#f85c5a', fontSize: '13px', marginRight: '3px' }} />\n                    activation email\n                </span>\n            ) : text == 4 ? (\n                <span className='table-row-red'>\n                    <PushpinOutlined style={{ color: '#f85c5a', fontSize: '13px', marginRight: '3px' }} />\n                    Customer service reply email\n                </span>\n            ) : (\n                <span className='table-row-green'>\n                    <PushpinOutlined style={{ color: '#18BFA4', fontSize: '13px', marginRight: '3px' }} />\n                    {temType[text]}\n                </span>\n            )\n    },\n    {\n        title: 'Language',\n        dataIndex: 'language',\n        key: 'language',\n        align: 'center',\n        render: (text, item) =>\n            text == 1 ? (\n                <span className='table-row-p'>\n                    <PushpinOutlined style={{ color: '#868AF6', fontSize: '13px', marginRight: '3px' }} />\n                    English\n                </span>\n            ) : text == 2 ? (\n                <span className='table-row-green'>\n                    <PushpinOutlined style={{ color: '#18BFA4', fontSize: '13px', marginRight: '3px' }} />\n                    French\n                </span>\n            ) : text == 3 ? (\n                <span className='table-row-red'>\n                    <PushpinOutlined style={{ color: '#f85c5a', fontSize: '13px', marginRight: '3px' }} />\n                    Spanish\n                </span>\n            ) : text == 4 ? (\n                <span className='table-row-red'>\n                    <PushpinOutlined style={{ color: '#f85c5a', fontSize: '13px', marginRight: '3px' }} />\n                    Polish\n                </span>\n            ) : text == 5 ? (\n                <span className='table-row-p'>\n                    <PushpinOutlined style={{ color: '#868AF6', fontSize: '13px', marginRight: '3px' }} />\n                    Portuguese\n                </span>\n            ) : null\n    },\n    {\n        title: 'Title',\n        dataIndex: 'title',\n        key: 'title',\n        align: 'center'\n    }\n]\n\nconst searchLayout = {\n    labelCol: {\n        span: 8\n    },\n    wrapperCol: {\n        span: 16\n    }\n}\n\nconst SearchBar = props => {\n    const [form] = Form.useForm()\n\n    const onFinish = values => {\n        props.changeSearch(values)\n    }\n\n    return (\n        <Form\n            {...searchLayout}\n            form={form}\n            name='advanced_search'\n            className='ant-advanced-search-form'\n            onFinish={onFinish}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Form.Item name='id' label=' ID'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n                <Col span={8}>\n                    <Form.Item name='type' label='Type'>\n                        <Select>\n                            {/* <Option value={1}>Verification code email</Option>\n                            <Option value={2}>welcome email</Option>\n                            <Option value={3}>activation email</Option>\n                            <Option value={4}>Customer service reply email</Option> */}\n                            {Object.keys(props.temType) &&\n                                Object.keys(props.temType).map((item, index) => {\n                                    return <Option value={item}>{props.temType[item]}</Option>\n                                })}\n                        </Select>\n                    </Form.Item>\n                </Col>\n                <Col span={8}>\n                    <Form.Item name='language' label='Language'>\n                        <Select>\n                            <Option value={1}>English</Option>\n                            <Option value={2}>French</Option>\n                            <Option value={3}>Spanish</Option>\n                            <Option value={4}>Polish</Option>\n                            <Option value={5}>Portuguese</Option>\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                <Col span={24} style={{ textAlign: 'right' }}>\n                    <Button type='primary' htmlType='submit'>\n                        Search\n                    </Button>\n                    <Button\n                        style={{ margin: '0 8px' }}\n                        onClick={() => {\n                            form.resetFields()\n                        }}>\n                        Reset\n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n    )\n}\n\nconst DetailModal = ({ visible, onCreate, onCancel, formData, disabled }) => {\n    const [form] = Form.useForm()\n\n    const [user, setUser] = useState({})\n    const [allMemVisible, setAllMemVisible] = useState(false)\n\n    const layout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 14 }\n    }\n    const rangeConfig = {\n        rules: [\n            {\n                type: 'array',\n                message: 'Please select time!'\n            }\n        ]\n    }\n\n    useEffect(() => {\n        if (Object.keys(formData).length) {\n            form.setFieldsValue(formData)\n        } else {\n            form.resetFields()\n        }\n    }, [])\n\n    const onGenderChange = value => {\n        form.setFieldsValue({ Gender: value })\n    }\n\n    const onCreateNew = val => {\n        setUser(val)\n        setAllMemVisible(false)\n        form.setFieldsValue({\n            user_id: val.user_id\n        })\n    }\n\n    return (\n        <Modal\n            visible={visible}\n            title='创建邀请码'\n            okText='Submit'\n            cancelText='Cancel'\n            onCancel={onCancel}\n            onOk={() => {\n                form.validateFields()\n                    .then(values => {\n                        form.resetFields()\n                        onCreate(values)\n                    })\n                    .catch(info => {\n                        console.log('Validate Failed:', info)\n                    })\n            }}>\n            <Form {...layout} form={form} name='form_in_modal'>\n                <Form.Item name='email' label='email' rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}\n\nconst SearchTableView = props => {\n    const [state, setState] = useState({\n        list: [],\n        pagination: {\n            current: 1,\n            pageSize: 20\n        },\n        search: {},\n        loading: true,\n        visible: false,\n        disabled: false,\n        formData: {}\n    })\n    const [handleState, setHandleState] = useState({\n        visible: false,\n        data: {}\n    })\n\n    const [temType, setTemType] = useState({})\n\n    const getTemplateType = () => {\n        APIGetTemplateType().then(resp => {\n            setTemType(resp.data.messageTypes)\n            console.log(resp.data.messageTypes)\n        })\n    }\n\n    useEffect(() => {\n        const { pagination } = state\n        getTemplateType()\n        const params = { start_row: 0, page_size: state.pagination.pageSize }\n        getList(params)\n    }, [])\n\n    const getList = params => {\n        const { pagination, search } = state\n        setState({ ...state, loading: true })\n        APIGetEmailTem(JSON.stringify(params))\n            .then(resp => {\n                setState({\n                    ...state,\n                    visible: false,\n                    list: resp.data.list && getKeyList(resp.data.list),\n                    loading: false,\n                    pagination: {\n                        // ...state.pagination,\n                        total: resp.data.pager.total\n                    }\n                })\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const handleChange = pagination => {\n        const params = {\n            ...state.search,\n            page_size: pagination.pageSize,\n            start_row: pagination.pageSize * (pagination.current - 1)\n        }\n        getList(params)\n    }\n\n    const changeSearch = search => {\n        const params = { ...search, page_size: 10, start_row: 0 }\n        getList(params)\n        setState({\n            ...state,\n            ...search\n        })\n    }\n\n    const exportRecord = () => {\n        APIexportRewardRecord()\n            .then(xhr => {\n                return\n            })\n            .catch((err, status, xhr) => {})\n    }\n\n    const onCreate = data => {\n        console.log('data', data)\n        APICreateInvitecode(data)\n            .then(resp => {\n                message.success('success')\n                const params = { ...state.search }\n                // setState({\n                //     ...state,\n                //     visible: false\n                // })\n                getList(params)\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const createEmailTem = () => {\n        props.history.push('/email_tem_detail/0')\n    }\n\n    const edit = data => {\n        props.history.push('/email_tem_detail/' + data.id)\n    }\n\n    const Ondelete = data => {}\n\n    const confirm = data => {\n        console.log('dataconfirm', data)\n        APIDeleteMerchant({ id: data.id }).then(resp => {\n            const { pagination } = state\n            const params = { start_row: 0, page_size: state.pagination.pageSize }\n            getList(params)\n        })\n    }\n\n    const rowSelection = () => {}\n\n    return (\n        <Layout className='animated fadeIn'>\n            <DetailModal\n                visible={state.visible}\n                onCreate={onCreate}\n                onCancel={() => {\n                    setState({ ...state, visible: false })\n                }}\n                formData={state.formData}\n                disabled={state.disabled}\n            />\n            <div className='web-bread-c'>\n                <WebBreadcrumb arr={['Email Template']} />\n                <h3>Email Template</h3>\n                <img src={Aset} className='aset' alt='aset' />\n            </div>\n            <div className='base-wr'>\n                <div className='base-style'>\n                    <SearchBar changeSearch={changeSearch} temType={temType} />\n                </div>\n                <Row>\n                    <Col span={24}>\n                        <div className='base-style'>\n                            <Row>\n                                <Col span={24} style={{ textAlign: 'right', marginBottom: '15px' }}>\n                                    <Button\n                                        type='primary'\n                                        onClick={() => {\n                                            createEmailTem()\n                                        }}>\n                                        New Email Tempalte\n                                    </Button>\n                                </Col>\n                            </Row>\n                            <Table\n                                columns={columns(edit, Ondelete, confirm, temType)}\n                                rowKey={record => record.key}\n                                dataSource={state.list}\n                                onChange={handleChange}\n                                loading={state.loading}\n                                expandable={{\n                                    expandedRowRender: record => <p style={{ margin: 0 }}>{record.content}</p>,\n                                    rowExpandable: record => record.name !== 'Not Expandable'\n                                }}\n                                bordered\n                                rowSelection={{\n                                    type: 'checkbox',\n                                    ...rowSelection\n                                }}\n                                pagination={state.pagination}\n                                scroll={{ scrollToFirstRowOnChange: true, x: 1000 }}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </Layout>\n    )\n}\n\nexport default SearchTableView\n","import EmailTem from './EmailTem.jsx'\nexport default EmailTem\n"],"sourceRoot":""}