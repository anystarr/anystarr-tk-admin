{"version":3,"sources":["views/Promotions/Promotions.jsx","views/Promotions/index.js"],"names":["Option","MonthPicker","RangePicker","columns","label","value","map","option","index","key","edit","changeShow","confirm","onChangeStatus","title","dataIndex","width","align","render","text","item","className","onClick","FormOutlined","style","marginLeft","HeaderC","name","display","status","searchLayout","labelCol","span","wrapperCol","SearchBar","props","useForm","form","onFinish","values","console","log","changeSearch","gutter","Item","allowClear","textAlign","type","htmlType","loading","margin","resetFields","DetailModal","visible","onCreate","onCancel","formData","disabled","useState","useEffect","Object","keys","length","setFieldsValue","okText","cancelText","onOk","validateFields","then","catch","info","rules","required","SearchTableView","list","pagination","current","pageSize","search","state","setState","data","params","start_row","page_size","getList","APIGetPromotionList","JSON","stringify","resp","getKeyList","total","pager","err","is_show_app","APICreateOrModifySku","categoryJson","success","WebBreadcrumb","arr","src","Aset","alt","marginBottom","history","push","id","rowKey","record","dataSource","onChange","bordered","rowSelection","scroll","scrollToFirstRowOnChange","x","Promotions"],"mappings":"+iBAwCQA,G,IADAC,Y,IAAaC,Y,IACbF,QAmBFG,GAjBW,CACb,CAAEC,MAAO,qBAAOC,MAAO,aACvB,CAAED,MAAO,qBAAOC,MAAO,YAGEC,KAAI,SAACC,EAAQC,GACtC,OACI,kBAACR,EAAD,CAAQS,IAAKD,EAAOH,MAAOE,EAAOF,OAC7BE,EAAOH,UASJ,SAACM,EAAMC,EAAYC,EAASC,GAA5B,MAA+C,CAC3D,CACIC,MAAO,SACPC,UAAW,OACXN,IAAK,OACLO,MAAO,MACPC,MAAO,SACPC,OAAQ,SAACC,EAAMC,GAAP,OACJ,6BACI,uBACIC,UAAU,aACVC,QAAS,WACLZ,EAAKU,KAET,kBAACG,EAAA,EAAD,MACA,0BAAMC,MAAO,CAAEC,WAAY,QAA3B,YAqBhB,CACIX,MAAO,eACPC,UAAW,KACXN,IAAK,KACLQ,MAAO,SACPC,OAAQ,SAACC,EAAMC,GAAP,OAAgB,0BAAMC,UAAU,YAAYF,KAExD,CACIL,MAAO,WACPC,UAAW,WACXN,IAAK,WACLQ,MAAO,SACPC,OAAQ,SAACC,EAAMC,GAAP,OACJ,oCACa,GAARD,EACK,aACQ,GAARA,EACA,0BACQ,GAARA,EACA,uBACQ,GAARA,EACA,sBACA,MAIlB,CACIL,MAAO,kBACPC,UAAW,QACXN,IAAK,QACLO,MAAO,MACPC,MAAO,UAmBX,CACIH,MAAO,kBACPC,UAAW,kBACXN,IAAK,kBACLQ,MAAO,UAEX,CACIH,MAAO,gBACPC,UAAW,gBACXN,IAAK,gBACLQ,MAAO,UAEX,CACIH,MAAO,YACPC,UAAW,gBACXN,IAAK,gBACLQ,MAAO,OACPC,OAAQ,SAACC,EAAMC,GAAP,OACJ,yBAAKI,MAAO,CAAER,MAAO,UACjB,kBAACU,EAAA,EAAD,CAASC,KAAMR,EAAMK,MAAO,CAAEI,QAAS,kBACvC,8BAAOT,MAInB,CACIL,MAAO,SACPC,UAAW,SACXN,IAAK,SACLQ,MAAO,SACPC,OAAQ,SAACC,EAAMC,GAAP,OACJ,yBAAKI,MAAO,CAAER,MAAO,UACjB,uBAAOa,OAAgB,GAARV,EAAY,UAAoB,GAARA,EAAY,aAAuB,GAARA,EAAY,QAAU,YAC/E,GAARA,EAAY,QAAkB,GAARA,EAAY,kBAA4B,GAARA,EAAY,UAAY,MAI3F,CACIL,MAAO,cACPC,UAAW,eACXN,IAAK,eACLQ,MAAO,SACPC,OAAQ,SAACC,EAAMC,GAAP,OAAgB,oCAAW,GAARD,EAAY,YAAsB,GAARA,EAAY,YAAc,MAEnF,CACIL,MAAO,cACPC,UAAW,cACXN,IAAK,cACLO,MAAO,MACPC,MAAO,aAmBTa,EAAe,CACjBC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,KA4FRE,EAAY,SAAAC,GAAU,IAAD,EACR,IAAKC,UAAbC,EADgB,oBAQvB,OACI,uCACQP,EADR,CAEIO,KAAMA,EACNV,KAAK,kBACLN,UAAU,2BACViB,SAXS,SAAAC,GACbC,QAAQC,IAAI,SAAUF,GACtBJ,EAAMO,aAAaH,MAUf,uBAAKI,OAAQ,IACT,uBAAKX,KAAM,GACP,sBAAMY,KAAN,CAAWjB,KAAK,KAAKvB,MAAM,MACvB,8BAGR,uBAAK4B,KAAM,GACP,sBAAMY,KAAN,CAAWjB,KAAK,WAAWvB,MAAM,YAC7B,uBAAQyC,YAAU,GACd,kBAAC7C,EAAD,CAAQK,MAAO,GAAf,cACA,kBAACL,EAAD,CAAQK,MAAO,GAAf,2BACA,kBAACL,EAAD,CAAQK,MAAO,GAAf,wBACA,kBAACL,EAAD,CAAQK,MAAO,GAAf,uBACA,kBAACL,EAAD,CAAQK,MAAO,GAAf,sBAIZ,uBAAK2B,KAAM,GACP,sBAAMY,KAAN,CAAWjB,KAAK,QAAQvB,MAAM,SAC1B,+BAIZ,uBAAKuC,OAAQ,IAMT,uBAAKX,KAAM,GACP,sBAAMY,KAAN,CAAWjB,KAAK,YAAYvB,MAAM,aAC9B,uBAAQyC,YAAU,GACd,kBAAC7C,EAAD,CAAQK,MAAO,GAAf,iBACA,kBAACL,EAAD,CAAQK,MAAO,GAAf,qBAMhB,2BACI,uBAAK2B,KAAM,GAAIR,MAAO,CAAEsB,UAAW,UAC/B,uBAAQC,KAAK,UAAUC,SAAS,SAASC,QAASd,EAAMc,SAAxD,UAGA,uBACIzB,MAAO,CAAE0B,OAAQ,SACjB5B,QAAS,WACLe,EAAKc,gBAHb,aAadC,EAAc,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAyB,KAAfC,SAC3C,IAAKrB,WAAbC,EADkE,sBAGjDqB,mBAAS,IAHwC,gCAI/BA,oBAAS,IAJsB,6BAmBzEC,qBAAU,WACNnB,QAAQC,IAAI,WAAYe,GACpBI,OAAOC,KAAKL,GAAUM,OACtBzB,EAAK0B,eAAeP,GAEpBnB,EAAKc,gBAEV,CAACK,IAcJ,OACI,uBACIH,QAASA,EACTvC,MAAM,MACNkD,OAAO,SACPC,WAAW,SACXV,SAAUA,EACVW,KAAM,WACF7B,EAAK8B,iBACAC,MAAK,SAAA7B,GACFF,EAAKc,cACLG,EAASf,MAEZ8B,OAAM,SAAAC,GACH9B,QAAQC,IAAI,mBAAoB6B,QAG5C,uCAnDO,CACXvC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAiDhB,CAAkBK,KAAMA,EAAMV,KAAK,kBAC/B,sBAAMiB,KAAN,CAAWjB,KAAK,KAAKvB,MAAM,MACvB,uBAAOqD,UAAQ,KAEnB,sBAAMb,KAAN,CAAWjB,KAAK,aAAavB,MAAM,YAAYmE,MAAO,CAAC,CAAEC,UAAU,KAC/D,6BAEJ,sBAAM5B,KAAN,CAAWjB,KAAK,aAAavB,MAAM,aAC/B,6BAEJ,sBAAMwC,KAAN,CAAWjB,KAAK,aAAavB,MAAM,aAC/B,6BAEJ,sBAAMwC,KAAN,CAAWjB,KAAK,aAAavB,MAAM,WAAWmE,MAAO,CAAC,CAAEC,UAAU,KAC9D,gCAiOLC,EA1NS,SAAAtC,GAAU,IAAD,EACHuB,mBAAS,CAC/BgB,KAAM,GACNC,WAAY,CACRC,QAAS,EACTC,SAAU,IAEdC,OAAQ,GACR7B,SAAS,EACTI,SAAS,EACTI,UAAU,EACVD,SAAU,KAXe,mBACtBuB,EADsB,KACfC,EADe,OAaStB,mBAAS,CAC3CL,SAAS,EACT4B,KAAM,KAfmB,6BAiB7BtB,qBAAU,WACiBoB,EAAfJ,WADK,IAEPO,EAAS,CAAEC,UAAW,EAAGC,UAAWL,EAAMJ,WAAWE,UAC3DQ,EAAQH,KACT,IAEH,IAAMG,EAAU,SAAAH,GACmBH,EAAvBJ,WAAuBI,EAAXD,OACpBtC,QAAQC,IAAI,OAAQyC,GACpBF,EAAS,2BAAKD,GAAN,IAAa9B,SAAS,KAE9BqC,aAAoBC,KAAKC,UAAUN,IAC9Bd,MAAK,SAAAqB,GACFT,EAAS,2BACFD,GADC,IAEJ1B,SAAS,EACTqB,KAAMe,EAAKR,KAAKP,MAAQgB,qBAAWD,EAAKR,KAAKP,MAC7CzB,SAAS,EACT6B,OAAQI,EAAOJ,OACfH,WAAY,CACRgB,MAAOF,EAAKR,KAAKW,MAAMD,MACvBf,QAASM,EAAOC,UAAYD,EAAOE,UAAY,EAC/CP,SAAUK,EAAOE,iBAI5Bf,OAAM,SAAAwB,GACHrD,QAAQC,IAAI,MAAOoD,OAsH/B,OACI,uBAAQxE,UAAU,mBACd,kBAAC,EAAD,CACIgC,QAAS0B,EAAM1B,QACfC,SAtFK,SAAA2B,GACbzC,QAAQC,IAAI,OAAQwC,GACpBA,EAAKa,YAAc,EACnBC,YAAqB,CACjBC,aAAcT,KAAKC,UAAUP,KAE5Bb,MAAK,SAAAqB,GACF,IAAQQ,QAAQ,WAChB,IAAMf,EAAM,2BAAQH,EAAMD,QAAd,IAAsBK,UAAW,EAAGC,UAAW,KAC3DC,EAAQH,MAEXb,OAAM,SAAAwB,GACHrD,QAAQC,IAAI,MAAOoD,OA2EnBtC,SAAU,WACNyB,EAAS,2BAAKD,GAAN,IAAa1B,SAAS,MAElCG,SAAUuB,EAAMvB,SAChBC,SAAUsB,EAAMtB,WAEpB,yBAAKpC,UAAU,eACX,kBAAC6E,EAAA,EAAD,CAAeC,IAAK,CAAC,sBACrB,+CACA,yBAAKC,IAAKC,IAAMhF,UAAU,OAAOiF,IAAI,UAEzC,yBAAKjF,UAAU,WACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAWqB,aArHN,SAAAoC,GACjB,IAAMI,EAAM,2BAAQJ,GAAR,IAAgBM,UAAW,GAAID,UAAW,EAAGL,OAAQA,IACjEE,EAAS,2BACFD,GADC,IAEJD,OAAQA,KAEZO,EAAQH,IA+G2CjC,QAAS8B,EAAM9B,WAE1D,2BACI,uBAAKjB,KAAM,IACP,yBAAKX,UAAU,cACX,2BACI,uBAAKW,KAAM,GAAIR,MAAO,CAAEsB,UAAW,QAASyD,aAAc,SACtD,uBACIxD,KAAK,UACLzB,QAAS,WA9CzCa,EAAMqE,QAAQC,KAAK,+CA4CS,mBASR,uBACItG,QAASA,GA7FxB,SAAA8E,GACTzC,QAAQC,IAAI,OAAQwC,GACpB9C,EAAMqE,QAAQC,KAAK,2CAA6CxB,EAAKyB,OA4F7CC,OAAQ,SAAAC,GAAM,OAAIA,EAAOnG,KACzBoG,WAAY9B,EAAML,KAClBoC,SAxJP,SAAAnC,GACjBnC,QAAQC,IAAI,QAASsC,GAErB,IAAMG,EAAM,2BACLH,EAAMD,QADD,IAERM,UAAWT,EAAWE,SACtBM,UAAWR,EAAWE,UAAYF,EAAWC,QAAU,GACvDE,OAAQC,EAAMD,SAGlBtC,QAAQC,IAAI,MAAOyC,GAEnBG,EAAQH,IA6IgBjC,QAAS8B,EAAM9B,QACf8D,UAAQ,EACRC,aAAY,aACRjE,KAAM,aA5CjB,eA+CO4B,WAAYI,EAAMJ,WAClBsC,OAAQ,CAAEC,0BAA0B,EAAMC,EAAG,aC1pB9DC","file":"static/js/58.f01af621.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\nimport WebBreadcrumb from '@/components/WebBreadcrumb'\nimport {\n    Layout,\n    Row,\n    Col,\n    Tag,\n    Table,\n    Button,\n    Modal,\n    Input,\n    Popconfirm,\n    Form,\n    DatePicker,\n    Select,\n    message,\n    Switch,\n    Image,\n    Badge\n} from 'antd'\nimport '@/style/view-style/table.less'\nimport {\n    APIexportRewardRecord,\n    APICreateOrModifySku,\n    APIDeleteSku,\n    APIModifyCrmUserStatus,\n    APIGetCrmUser,\n    APIGetPromotionList,\n    APIGetProductList\n} from '@/mapi'\nimport { getKeyList } from '@/tools/action.js'\nimport { getLendTime, getLendTimeNew, getCleanedParams } from '@/tools/help.js'\nimport { render } from 'react-dom'\nimport { search } from '../../tools/host'\nimport Aset from '@/imgs/aset1.png'\nimport $ from 'jquery'\nimport { FormOutlined, MinusCircleOutlined, CheckCircleOutlined, PushpinOutlined } from '@ant-design/icons'\nimport HeaderC from '@/components/HeaderC'\n\nconst { MonthPicker, RangePicker } = DatePicker\nconst { Option } = Select\n\nconst typeList = [\n    { label: '待处理', value: 'to_handle' },\n    { label: '已处理', value: 'handled' }\n]\n\nconst TypeOptions = typeList.map((option, index) => {\n    return (\n        <Option key={index} value={option.value}>\n            {option.label}\n        </Option>\n    )\n})\n\nconst getLocalTime = nS => {\n    return new Date(parseInt(nS) * 1000).toLocaleString().replace(/:\\d{1,2}$/, ' ')\n}\n\nconst columns = (edit, changeShow, confirm, onChangeStatus) => [\n    {\n        title: 'Action',\n        dataIndex: 'edit',\n        key: 'edit',\n        width: '100',\n        align: 'center',\n        render: (text, item) => (\n            <div>\n                <a\n                    className='action-btn'\n                    onClick={() => {\n                        edit(item)\n                    }}>\n                    <FormOutlined />\n                    <span style={{ marginLeft: '4px' }}>Edit</span>\n                </a>\n\n                {/* <Popconfirm\n                    title='Are you sure delete this merchant?'\n                    onConfirm={() => {\n                        confirm(item)\n                    }}\n                    // onCancel={cancel}\n                    okText='Yes'\n                    cancelText='No'>\n                    <a\n                        onClick={() => {\n                            // Ondelete(item)\n                        }}>\n                        Delete\n                    </a>\n                </Popconfirm> */}\n            </div>\n        )\n    },\n    {\n        title: 'Promotion ID',\n        dataIndex: 'id',\n        key: 'id',\n        align: 'center',\n        render: (text, item) => <span className='table-id'>{text}</span>\n    },\n    {\n        title: 'Category',\n        dataIndex: 'category',\n        key: 'category',\n        align: 'center',\n        render: (text, item) => (\n            <>\n                {text == 1\n                    ? 'Top banner'\n                    : text == 2\n                    ? 'abComo selection banner'\n                    : text == 3\n                    ? 'Rewarded task -sigle'\n                    : text == 4\n                    ? 'Rewarded task -dual'\n                    : ''}\n            </>\n        )\n    },\n    {\n        title: 'Promotion Title',\n        dataIndex: 'title',\n        key: 'title',\n        width: '100',\n        align: 'center'\n    },\n    // {\n    //     title: 'Banner',\n    //     dataIndex: 'banner',\n    //     key: 'banner',\n    //     align: 'center',\n    //     render: (text, item) => (\n    //         <div style={{ display: 'flex' }}>\n    //             {text && text !='1' &&\n    //                 JSON.parse(text).map((url, index) => {\n    //                     console.log('urlll,', url)\n    //                     return (\n    //                         <Image src={url} />\n    //                     )\n    //                 })}\n    //         </div>\n    //     )\n    // },\n    {\n        title: 'Post start time',\n        dataIndex: 'post_start_time',\n        key: 'post_start_time',\n        align: 'center'\n    },\n    {\n        title: 'Post end time',\n        dataIndex: 'post_end_time',\n        key: 'post_end_time',\n        align: 'center'\n    },\n    {\n        title: 'Posted by',\n        dataIndex: 'operator_name',\n        key: 'operator_name',\n        align: 'left',\n        render: (text, item) => (\n            <div style={{ width: '120px' }}>\n                <HeaderC name={text} style={{ display: 'inline-block' }} />\n                <span>{text}</span>\n            </div>\n        )\n    },\n    {\n        title: 'status',\n        dataIndex: 'status',\n        key: 'status',\n        align: 'center',\n        render: (text, item) => (\n            <div style={{ width: '120px' }}>\n                <Badge status={text == 2 ? 'success' : text == 1 ? 'processing' : text == 0 ? 'error' : 'default'} />\n                {text == 0 ? 'Ended' : text == 1 ? 'Pending to post' : text == 2 ? 'Posting' : ''}\n            </div>\n        )\n    },\n    {\n        title: 'Show to all',\n        dataIndex: 'is_whitelist',\n        key: 'is_whitelist',\n        align: 'center',\n        render: (text, item) => <>{text == 0 ? 'All users' : text == 1 ? 'Customize' : ''}</>\n    },\n    {\n        title: 'Update date',\n        dataIndex: 'update_time',\n        key: 'update_time',\n        width: '100',\n        align: 'center'\n    }\n]\n\nconst campaignColumn = () => [\n    {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n        align: 'center'\n    },\n    {\n        title: 'Title',\n        dataIndex: 'title',\n        key: 'title',\n        align: 'center'\n    }\n]\n\nconst searchLayout = {\n    labelCol: {\n        span: 8\n    },\n    wrapperCol: {\n        span: 16\n    }\n}\n\nconst SampleCamModal = ({ visible, onCreate, onCancel, addToCampaignList }) => {\n    const [state, setState] = useState({\n        list: [],\n        loading: false,\n        pagination: {\n            current: 1,\n            pageSize: 10\n        },\n        search: {}\n    })\n    const [selectObj, setSelectObj] = useState({})\n    const getList = params => {\n        const { pagination, search } = state\n        setState({ ...state, loading: true })\n        APIGetProductList(JSON.stringify(getCleanedParams(params)))\n            .then(resp => {\n                setState({\n                    ...state,\n                    visible: false,\n                    list: resp.data.list && getKeyList(resp.data.list),\n                    loading: false,\n                    search: params.search,\n                    pagination: {\n                        total: resp.data.pager.total,\n                        current: params.start_row / params.page_size + 1,\n                        pageSize: params.page_size\n                    }\n                })\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    useEffect(() => {\n        const { pagination } = state\n        const params = { start_row: 0, page_size: state.pagination.pageSize }\n        getList(params)\n    }, [visible])\n\n    const changeSearch = search => {\n        const params = { ...search, page_size: 10, start_row: 0, search: search }\n        setState({\n            ...state,\n            search: search\n        })\n        getList(params)\n    }\n\n    const rowSelection = {\n        onChange: (selectedRowKeys, selectedRows) => {\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows)\n            setSelectObj(selectedRows)\n        }\n    }\n\n    return (\n        <Modal\n            visible={visible}\n            title='Feature Product'\n            okText='Submit'\n            width={900}\n            onOk={() => {\n                // onCreateNew(selectObj)\n                console.log('select', selectObj)\n                addToCampaignList(selectObj)\n            }}\n            cancelText='Cancel'\n            onCancel={onCancel}>\n            <div style={{ marginBottom: '15px' }}>\n                <SearchBar changeSearch={changeSearch} loading={state.loading} />\n            </div>\n            <Table\n                size='small'\n                columns={campaignColumn()}\n                pagination={state.pagination}\n                rowKey={record => record.key}\n                dataSource={state.list}\n                border\n                rowSelection={{\n                    type: 'checkbox',\n                    ...rowSelection\n                }}\n            />\n        </Modal>\n    )\n}\n\nconst SearchBar = props => {\n    const [form] = Form.useForm()\n\n    const onFinish = values => {\n        console.log('values', values)\n        props.changeSearch(values)\n    }\n\n    return (\n        <Form\n            {...searchLayout}\n            form={form}\n            name='advanced_search'\n            className='ant-advanced-search-form'\n            onFinish={onFinish}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Form.Item name='id' label='ID'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n                <Col span={8}>\n                    <Form.Item name='category' label='Category'>\n                        <Select allowClear>\n                            <Option value={1}>Top banner</Option>\n                            <Option value={2}>abComo selection banner</Option>\n                            <Option value={3}>Rewarded task -sigle</Option>\n                            <Option value={4}>Rewarded task -dual</Option>\n                            <Option value={5}>Feature Product</Option>\n                        </Select>\n                    </Form.Item>\n                </Col>\n                <Col span={8}>\n                    <Form.Item name='title' label='Title'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row gutter={24}>\n                {/* <Col span={8}>\n                    <Form.Item name='title' label='Title'>\n                        <Input />\n                    </Form.Item>\n                </Col> */}\n                <Col span={8}>\n                    <Form.Item name='link_type' label='Link type'>\n                        <Select allowClear>\n                            <Option value={1}>Internal Link</Option>\n                            <Option value={2}>External Link</Option>\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={24} style={{ textAlign: 'right' }}>\n                    <Button type='primary' htmlType='submit' loading={props.loading}>\n                        Search\n                    </Button>\n                    <Button\n                        style={{ margin: '0 8px' }}\n                        onClick={() => {\n                            form.resetFields()\n                        }}>\n                        Reset\n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n    )\n}\n\nconst DetailModal = ({ visible, onCreate, onCancel, formData, disabled }) => {\n    const [form] = Form.useForm()\n\n    const [user, setUser] = useState({})\n    const [allMemVisible, setAllMemVisible] = useState(false)\n\n    const layout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 14 }\n    }\n    const rangeConfig = {\n        rules: [\n            {\n                type: 'array',\n                message: 'Please select time!'\n            }\n        ]\n    }\n\n    useEffect(() => {\n        console.log('formdata', formData)\n        if (Object.keys(formData).length) {\n            form.setFieldsValue(formData)\n        } else {\n            form.resetFields()\n        }\n    }, [formData])\n\n    const onGenderChange = value => {\n        form.setFieldsValue({ Gender: value })\n    }\n\n    const onCreateNew = val => {\n        setUser(val)\n        setAllMemVisible(false)\n        form.setFieldsValue({\n            user_id: val.user_id\n        })\n    }\n\n    return (\n        <Modal\n            visible={visible}\n            title='sku'\n            okText='Submit'\n            cancelText='Cancel'\n            onCancel={onCancel}\n            onOk={() => {\n                form.validateFields()\n                    .then(values => {\n                        form.resetFields()\n                        onCreate(values)\n                    })\n                    .catch(info => {\n                        console.log('Validate Failed:', info)\n                    })\n            }}>\n            <Form {...layout} form={form} name='form_in_modal'>\n                <Form.Item name='id' label='ID'>\n                    <Input disabled />\n                </Form.Item>\n                <Form.Item name='tier_1_cat' label='Tier1 Cat' rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name='tier_2_cat' label='Tier2 Cat'>\n                    <Input />\n                </Form.Item>\n                <Form.Item name='tier_3_cat' label='Tier3 Cat'>\n                    <Input />\n                </Form.Item>\n                <Form.Item name='shown_name' label='Sku name' rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}\n\nconst SearchTableView = props => {\n    const [state, setState] = useState({\n        list: [],\n        pagination: {\n            current: 1,\n            pageSize: 10\n        },\n        search: {},\n        loading: true,\n        visible: false,\n        disabled: false,\n        formData: {}\n    })\n    const [handleState, setHandleState] = useState({\n        visible: false,\n        data: {}\n    })\n    useEffect(() => {\n        const { pagination } = state\n        const params = { start_row: 0, page_size: state.pagination.pageSize }\n        getList(params)\n    }, [])\n\n    const getList = params => {\n        const { pagination, search } = state\n        console.log('role', params)\n        setState({ ...state, loading: true })\n\n        APIGetPromotionList(JSON.stringify(params))\n            .then(resp => {\n                setState({\n                    ...state,\n                    visible: false,\n                    list: resp.data.list && getKeyList(resp.data.list),\n                    loading: false,\n                    search: params.search,\n                    pagination: {\n                        total: resp.data.pager.total,\n                        current: params.start_row / params.page_size + 1,\n                        pageSize: params.page_size\n                    }\n                })\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const handleChange = pagination => {\n        console.log('state', state)\n\n        const params = {\n            ...state.search,\n            page_size: pagination.pageSize,\n            start_row: pagination.pageSize * (pagination.current - 1),\n            search: state.search\n        }\n\n        console.log('ttt', params)\n\n        getList(params)\n    }\n\n    const changeSearch = search => {\n        const params = { ...search, page_size: 10, start_row: 0, search: search }\n        setState({\n            ...state,\n            search: search\n        })\n        getList(params)\n    }\n\n    const exportRecord = () => {\n        APIexportRewardRecord()\n            .then(xhr => {\n                return\n            })\n            .catch((err, status, xhr) => {})\n    }\n\n    const onCreate = data => {\n        console.log('data', data)\n        data.is_show_app = 1\n        APICreateOrModifySku({\n            categoryJson: JSON.stringify(data)\n        })\n            .then(resp => {\n                message.success('success')\n                const params = { ...state.search, start_row: 0, page_size: 10 }\n                getList(params)\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const createSku = data => {\n        setState({\n            ...state,\n            visible: true,\n            formData: {}\n        })\n    }\n\n    const edit = data => {\n        console.log('data', data)\n        props.history.push('/mobile_app_management/promotion_detail/' + data.id)\n    }\n\n    const confirm = data => {\n        console.log('dataconfirm', data)\n        APIDeleteSku({ id: data.id }).then(resp => {\n            const { pagination } = state\n            const params = { start_row: 0, page_size: state.pagination.pageSize }\n            getList(params)\n        })\n    }\n\n    const changeShow = data => {\n        console.log('data', data)\n        APICreateOrModifySku({\n            categoryJson: JSON.stringify({\n                id: data.id,\n                tier_1_cat: data.tier_1_cat,\n                shown_name: data.shown_name,\n                is_show_app: data.is_show_app == 1 ? 0 : 1\n            })\n        })\n            .then(resp => {\n                const params = {\n                    ...state.search,\n                    page_size: state.pagination.pageSize,\n                    start_row: state.pagination.pageSize * (state.pagination.current - 1),\n                    search: state.search\n                }\n                getList(params)\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const addPromotion = () => {\n        props.history.push('/mobile_app_management/promotion_detail/0')\n    }\n\n    const onChangeStatus = data => {\n        console.log('onChangeStatus', data)\n        APIModifyCrmUserStatus({\n            crmUserJson: JSON.stringify({\n                id: data.id,\n                status: data.status == 1 ? 0 : 1\n            })\n        })\n            .then(resp => {})\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const rowSelection = () => {}\n\n    return (\n        <Layout className='animated fadeIn'>\n            <DetailModal\n                visible={state.visible}\n                onCreate={onCreate}\n                onCancel={() => {\n                    setState({ ...state, visible: false })\n                }}\n                formData={state.formData}\n                disabled={state.disabled}\n            />\n            <div className='web-bread-c'>\n                <WebBreadcrumb arr={['Promotions  List']} />\n                <h3>Promotions List</h3>\n                <img src={Aset} className='aset' alt='aset' />\n            </div>\n            <div className='base-wr'>\n                <div className='base-style'>\n                    <SearchBar changeSearch={changeSearch} loading={state.loading} />\n                </div>\n                <Row>\n                    <Col span={24}>\n                        <div className='base-style'>\n                            <Row>\n                                <Col span={24} style={{ textAlign: 'right', marginBottom: '15px' }}>\n                                    <Button\n                                        type='primary'\n                                        onClick={() => {\n                                            addPromotion()\n                                        }}>\n                                        Add promotion\n                                    </Button>\n                                </Col>\n                            </Row>\n                            <Table\n                                columns={columns(edit, changeShow, confirm, onChangeStatus)}\n                                rowKey={record => record.key}\n                                dataSource={state.list}\n                                onChange={handleChange}\n                                loading={state.loading}\n                                bordered\n                                rowSelection={{\n                                    type: 'checkbox',\n                                    ...rowSelection\n                                }}\n                                pagination={state.pagination}\n                                scroll={{ scrollToFirstRowOnChange: true, x: 1000 }}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </Layout>\n    )\n}\n\nexport default SearchTableView\n","import Promotions from './Promotions.jsx'\nexport default Promotions\n"],"sourceRoot":""}