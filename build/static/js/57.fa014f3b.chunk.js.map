{"version":3,"sources":["views/ReferralUser/ReferralUser.jsx","views/ReferralUser/index.js","../node_modules/@ant-design/icons-svg/es/asn/SearchOutlined.js","../node_modules/@ant-design/icons/es/icons/SearchOutlined.js"],"names":["Option","MonthPicker","RangePicker","config","rules","type","required","message","DownloadModal","label","value","map","option","index","key","visible","onCreate","onCancel","formData","disabled","useForm","form","title","okText","cancelText","onOk","validateFields","then","values","resetFields","catch","info","console","log","labelCol","span","wrapperCol","name","Item","showTime","format","DetailModal","useState","useEffect","Object","keys","length","setFieldsValue","SearchTableView","props","list","pagination","current","pageSize","search","loading","aVisible","aFormData","bVisible","bFormData","dVisible","dFormData","state","setState","data","params","startRow","getList","userId","location","replace","user_id","APIGetUserReferralList","resp","getKeyList","total","pager","err","rowSelection","onChange","selectedRowKeys","selectedRows","getCheckboxProps","record","className","begin_date","end_date","APIDownloadInvitecode","Referral_code_json","JSON","stringify","res","success","APICreateInvitecode","ReferralCodeJson","WebBreadcrumb","arr","src","Aset","style","textAlign","marginBottom","columns","dataIndex","align","render","text","item","bordered","rowKey","dataSource","page_size","start_row","ReferralUser","SearchOutlined","ref","React","AntdIcon","assign","icon","SearchOutlinedSvg","displayName"],"mappings":"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","file":"static/js/57.fa014f3b.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\nimport WebBreadcrumb from '@/components/WebBreadcrumb'\nimport { Layout, Row, Col, Tag, Table, Button, Modal, Input, Form, DatePicker, Select, message, Upload } from 'antd'\nimport '@/style/view-style/table.less'\nimport {\n    APIgetList,\n    APIrewardApplicationList,\n    APIrewardApplicationHandle,\n    APIexportRewardRecord,\n    APIGetUserList,\n    APIGetInvitecodeList,\n    APICreateInvitecode,\n    APIBatchCreateInvitecode,\n    APIDownloadInvitecode,\n    APIGetReferralCode,\n    APIGetUserReferralList\n} from '@/mapi'\nimport { getKeyList } from '@/tools/action.js'\nimport moment from 'moment'\nimport Aset from '@/imgs/aset1.png'\nimport { MinusCircleOutlined, CheckCircleOutlined, SearchOutlined, CloudDownloadOutlined } from '@ant-design/icons'\nimport HeaderC from '@/components/HeaderC'\n\nconst { MonthPicker, RangePicker } = DatePicker\nconst { Option } = Select\n\nconst config = {\n    rules: [\n        {\n            type: 'object',\n            required: true,\n            message: 'Please select time!'\n        }\n    ]\n}\nconst typeList = [\n    { label: '待处理', value: 'to_handle' },\n    { label: '已处理', value: 'handled' }\n]\n\nconst TypeOptions = typeList.map((option, index) => {\n    return (\n        <Option key={index} value={option.value}>\n            {option.label}\n        </Option>\n    )\n})\n\nconst getLocalTime = nS => {\n    return new Date(parseInt(nS) * 1000).toLocaleString().replace(/:\\d{1,2}$/, ' ')\n}\n\nconst columns = () => [\n    {\n        title: ' ID',\n        dataIndex: 'id',\n        key: 'id',\n        align: 'center',\n        render: (text, item) => <span className='table-id'>{text}</span>\n    },\n    {\n        title: 'Email',\n        dataIndex: 'register_email',\n        key: 'register_email',\n        align: 'center'\n    },\n    {\n        title: 'Created time',\n        dataIndex: 'create_time',\n        key: 'create_time',\n        align: 'center'\n        // render: (text, item) => <span>{new Date(text).toLocaleString()}</span>\n    }\n]\n\nconst searchLayout = {\n    labelCol: {\n        span: 8\n    },\n    wrapperCol: {\n        span: 16\n    }\n}\n\nconst SearchBar = props => {\n    const [form] = Form.useForm()\n\n    const onFinish = values => {\n        props.changeSearch(values)\n    }\n\n    return (\n        <Form\n            {...searchLayout}\n            form={form}\n            name='advanced_search'\n            className='ant-advanced-search-form'\n            onFinish={onFinish}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Form.Item name='user_id' label='User ID'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n                {/* <Col span={8}>\n                    <Form.Item name='Code' label='Code'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n                <Col span={8}>\n                    <Form.Item name='email' label='Email'>\n                        <Input />\n                    </Form.Item>\n                </Col> */}\n            </Row>\n            <Row>\n                <Col span={24} style={{ textAlign: 'right' }}>\n                    <Button icon={<SearchOutlined />} type='primary' htmlType='submit' loading={props.loading}>\n                        Search\n                    </Button>\n                    <Button\n                        style={{ margin: '0 8px' }}\n                        onClick={() => {\n                            form.resetFields()\n                        }}>\n                        Reset\n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n    )\n}\n\nconst DownloadModal = ({ visible, onCreate, onCancel, formData, disabled }) => {\n    const [form] = Form.useForm()\n    const layout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 14 }\n    }\n    const rangeConfig = {\n        rules: [\n            {\n                type: 'array',\n                message: 'Please select time!'\n            }\n        ]\n    }\n\n    return (\n        <Modal\n            visible={visible}\n            title='download '\n            okText='Submit'\n            cancelText='Cancel'\n            onCancel={onCancel}\n            onOk={() => {\n                form.validateFields()\n                    .then(values => {\n                        form.resetFields()\n                        onCreate(values)\n                    })\n                    .catch(info => {\n                        console.log('Validate Failed:', info)\n                    })\n            }}>\n            <Form {...layout} form={form} name='form_in_modal'>\n                <Form.Item label='User Name' name='user_name'>\n                    <Input />\n                </Form.Item>\n                <Form.Item label='Type' name='type'>\n                    <Select>\n                        <Option value={1}>Email</Option>\n                        <Option value={2}>Ins</Option>\n                        <Option value={3}>facebook</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item name='begin_date' label='Begin Time' {...config}>\n                    <DatePicker showTime format='YYYY-MM-DD HH:mm:ss' />\n                </Form.Item>\n                <Form.Item name='end_date' label='End Time' {...config}>\n                    <DatePicker showTime format='YYYY-MM-DD HH:mm:ss' />\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}\n\nconst DetailModal = ({ visible, onCreate, onCancel, formData, disabled }) => {\n    const [form] = Form.useForm()\n\n    const [user, setUser] = useState({})\n    const [allMemVisible, setAllMemVisible] = useState(false)\n\n    const layout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 14 }\n    }\n    const rangeConfig = {\n        rules: [\n            {\n                type: 'array',\n                message: 'Please select time!'\n            }\n        ]\n    }\n\n    useEffect(() => {\n        if (Object.keys(formData).length) {\n            form.setFieldsValue(formData)\n        } else {\n            form.resetFields()\n        }\n    }, [])\n\n    const onGenderChange = value => {\n        form.setFieldsValue({ Gender: value })\n    }\n\n    const onCreateNew = val => {\n        setUser(val)\n        setAllMemVisible(false)\n        form.setFieldsValue({\n            user_id: val.user_id\n        })\n    }\n\n    return (\n        <Modal\n            visible={visible}\n            title='Generate Referral code'\n            okText='Submit'\n            cancelText='Cancel'\n            onCancel={onCancel}\n            onOk={() => {\n                form.validateFields()\n                    .then(values => {\n                        form.resetFields()\n                        onCreate(values)\n                    })\n                    .catch(info => {\n                        console.log('Validate Failed:', info)\n                    })\n            }}>\n            <Form {...layout} form={form} name='form_in_modal'>\n                <Form.Item name='type' label='Type'>\n                    <Select>\n                        <Option value='email'>email</Option>\n                        <Option value='ins'>ins</Option>\n                        <Option value='fb'>fb</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item name='user_name' label='User Name' rules={[{ required: true }]}>\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}\n\nconst SearchTableView = props => {\n    const [state, setState] = useState({\n        list: [],\n        pagination: {\n            current: 1,\n            pageSize: 10\n        },\n        search: {},\n        loading: true,\n        visible: false,\n        disabled: false,\n        formData: {},\n        aVisible: false,\n        aFormData: {},\n        bVisible: false,\n        bFormData: {},\n\n        dVisible: false,\n        dFormData: {}\n    })\n    const [handleState, setHandleState] = useState({\n        visible: false,\n        data: {}\n    })\n    useEffect(() => {\n        const { pagination } = state\n        const params = { startRow: 0, pageSize: state.pagination.pageSize }\n        getList(params)\n    }, [])\n\n    const getList = params => {\n        let userId = props.location.search.replace(/^\\?user_id=/, '')\n        params.user_id = userId\n\n        const { pagination, search } = state\n        setState({\n            ...state,\n            loading: true\n        })\n        APIGetUserReferralList(params)\n            .then(resp => {\n                setState({\n                    ...state,\n                    visible: false,\n                    list: resp.data.list && getKeyList(resp.data.list),\n                    loading: false,\n                    pagination: {\n                        // ...state.pagination,\n                        total: resp.data.pager.total\n                    }\n                })\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const handleChange = pagination => {\n        const params = {\n            ...state.search,\n            page_size: pagination.pageSize,\n            start_row: pagination.pageSize * (pagination.current - 1)\n        }\n        getList(params)\n    }\n\n    const changeSearch = search => {\n        const params = { ...search, page_size: state.pagination.pageSize, start_row: 0 }\n        setState({\n            ...state,\n            ...search\n        })\n        getList(params)\n    }\n\n    const exportRecord = () => {\n        APIexportRewardRecord()\n            .then(xhr => {\n                return\n            })\n            .catch((err, status, xhr) => {})\n    }\n\n    const createInvitecode = () => {\n        setState({\n            ...state,\n            formData: {},\n            visible: true\n        })\n    }\n    const onCreate = data => {\n        console.log('data', data)\n        APICreateInvitecode({\n            ReferralCodeJson: JSON.stringify(data)\n        })\n            .then(resp => {\n                message.success('success')\n                const params = { ...state.search }\n                // setState({\n                //     ...state,\n                //     visible: false\n                // })\n                getList(params)\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const onCreateDownload = values => {\n        console.log('values', values)\n\n        let params = {\n            ...values,\n            begin_date: values['begin_date'].format('YYYY-MM-DD HH:mm:ss'),\n            end_date: values['end_date'].format('YYYY-MM-DD HH:mm:ss')\n        }\n        APIDownloadInvitecode({\n            Referral_code_json: JSON.stringify(params)\n        }).then(res => {\n            message.success('success')\n            setState({\n                ...state,\n                dVisible: false\n            })\n        })\n    }\n\n    const createInvitecodeNew = () => {}\n\n    const batchCreateInvitecode = () => {}\n\n    const batchUploadFile = ({ file, onSuccess }) => {\n        APIBatchCreateInvitecode({ file, file }).then(resp => {\n            onSuccess()\n            const params = { start_row: 0, page_size: state.pagination.pageSize }\n            getList(params)\n        })\n    }\n\n    const downloadInvitecode = () => {\n        setState({\n            dVisible: true\n        })\n    }\n\n    const rowSelection = {\n        onChange: (selectedRowKeys, selectedRows) => {\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows)\n        },\n        getCheckboxProps: record => ({\n            disabled: record.name === 'Disabled User',\n            name: record.name\n        })\n    }\n\n    return (\n        <Layout className='animated fadeIn'>\n            <DownloadModal\n                visible={state.dVisible}\n                onCreate={onCreateDownload}\n                onCancel={() => {\n                    setState({ ...state, dVisible: false })\n                }}\n                formData={state.formData}\n            />\n\n            <DetailModal\n                visible={state.visible}\n                onCreate={onCreate}\n                onCancel={() => {\n                    setState({ ...state, visible: false })\n                }}\n                formData={state.formData}\n                disabled={state.disabled}\n            />\n            {/* <div>\n                <WebBreadcrumb arr={['Referral Management']} />\n            </div> */}\n            <div className='web-bread-c'>\n                <WebBreadcrumb arr={['Referral Code List']} />\n                <h3>Referral Code List</h3>\n                <img src={Aset} className='aset' />\n            </div>\n            <div className='base-wr'>\n                {/* <div className='base-style'>\n                    <SearchBar changeSearch={changeSearch} loading={state.loading} />\n                </div> */}\n                <Row>\n                    <Col span={24}>\n                        <div className='base-style'>\n                            <Row>\n                                <Col span={24} style={{ textAlign: 'right', marginBottom: '15px' }}>\n                                    {/* <Button\n                                        icon={<CloudDownloadOutlined />}\n                                        style={{ marginLeft: '10px' }}\n                                        type='primary'\n                                        onClick={downloadInvitecode}>\n                                        Download Referral code\n                                    </Button>\n                                    <Button\n                                        style={{ marginRight: '10px', marginLeft: '10px' }}\n                                        type='primary'\n                                        onClick={() => {\n                                            createInvitecode()\n                                        }}>\n                                        + Generate Referral code\n                                    </Button>\n                                    <Upload customRequest={batchUploadFile}>\n                                        <Button type='primary'> + Generate a batch of Referral code</Button>\n                                    </Upload> */}\n                                </Col>\n                            </Row>\n                            <Table\n                                columns={columns()}\n                                bordered\n                                rowKey={record => record.key}\n                                rowSelection={{\n                                    type: 'checkbox',\n                                    ...rowSelection\n                                }}\n                                // scroll={{ scrollToFirstRowOnChange: true, x: 1000 }}\n                                dataSource={state.list}\n                                onChange={handleChange}\n                                loading={state.loading}\n                                pagination={state.pagination}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </Layout>\n    )\n}\n\nexport default SearchTableView\n","import ReferralUser from './ReferralUser.jsx'\nexport default ReferralUser\n","// This icon file is generated automatically.\nvar SearchOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z\" } }] }, \"name\": \"search\", \"theme\": \"outlined\" };\nexport default SearchOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SearchOutlinedSvg from \"@ant-design/icons-svg/es/asn/SearchOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SearchOutlined = function SearchOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: SearchOutlinedSvg\n  }));\n};\n\nSearchOutlined.displayName = 'SearchOutlined';\nexport default /*#__PURE__*/React.forwardRef(SearchOutlined);"],"sourceRoot":""}