{"version":3,"sources":["views/Statistic/Statistic.jsx","views/Statistic/index.js"],"names":["antIcon","RangePicker","Option","LoadingOutlined","style","fontSize","spin","Index","props","useState","loading","state","setState","useEffect","console","log","iframe","document","getElementById","attachEvent","onload","className","indicator","marginTop","id","minHeight","border","src","Statistic"],"mappings":"+UA2BMA,G,yEAJEC,Y,IACAC,OAGQ,kBAACC,EAAA,EAAD,CAAiBC,MAAO,CAAEC,SAAU,IAAMC,MAAI,KA2vC/CC,EAvDD,SAAAC,GAAU,IAAD,EACOC,mBAAS,CAC/BC,SAAS,IAFM,mBACZC,EADY,KACLC,EADK,KA0BnB,OArBAC,qBAAU,WACNC,QAAQC,IAAI,QACZ,IAAIC,EAASC,SAASC,eAAe,iBACjCF,EAAOG,YAEPH,EAAOG,YAAY,UAAU,WAEzBP,EAAS,CACLF,SAAS,OAIjBM,EAAOI,OAAS,WAEZR,EAAS,CACLF,SAAS,QAOrB,uBAAQW,UAAU,yBACbV,EAAMD,QAAU,uBAAMY,UAAWtB,EAASI,MAAO,CAAEmB,UAAW,WAAgB,KAC/E,4BACIC,GAAG,gBACHpB,MAAO,CAAEqB,UAAW,SAAUC,OAAQ,QACtCC,IAAI,oGC7vCLC,a","file":"static/js/51.991a9e00.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Layout, Row, Col, Divider, Statistic, Button, Card, DatePicker, Select, Table, Tag, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport '@/style/view-style/index.less'\nimport {\n    APIGetUserAcquisition,\n    APIGetKolDemInfl,\n    APGetCampaignPerformance,\n    APIGetPendingTasks,\n    APIDownloadCampaign,\n    APIGetUserRetention,\n    APIGetTaskRetention\n} from '@/mapi'\nimport moment from 'moment'\n// import { FunnelChart, Tooltip, Funnel, LabelList  } from 'recharts'\nimport { Line } from '@ant-design/charts'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/chart/funnel'\n\nconst { RangePicker } = DatePicker\nconst { Option } = Select\n\nconst dateFormat = 'YYYY-MM-DD HH:mm:ss'\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\n\nconst UserAcquisition = props => {\n    const [state, setState] = useState({\n        acquisitionData: {}\n    })\n    const [dState, setDState] = useState({\n        range: [moment('2020-10-10 10:00:00'), moment('2020-10-11 12:00:00')]\n    })\n\n    const getUserAcquisition = (begin, end) => {\n        if (begin && end) {\n            begin = `${begin} 00:00:00`\n            end = `${end} 23:59:59`\n        }\n        APIGetUserAcquisition({\n            begin: begin,\n            end: end\n        }).then(resp => {\n            setState({\n                acquisitionData: resp.data.data\n            })\n        })\n    }\n\n    useEffect(() => {\n        getUserAcquisition()\n        getTodayTime()\n    }, [])\n\n    const onChange = (value, dateString) => {\n        console.log('dState rang', dState)\n\n        console.log('value', value)\n        console.log('dateString', dateString)\n        if (dateString) {\n            getUserAcquisition(dateString[0], dateString[1])\n        }\n        let resRange = [moment(dateString[0]), moment(dateString[1])]\n        setDState({\n            range: resRange\n        })\n    }\n\n    const getTodayTime = () => {\n        let timeStamp = new Date()\n        let YY = new Date(timeStamp).getFullYear()\n        let MM =\n            new Date(timeStamp).getMonth() < 9\n                ? '0' + (new Date(timeStamp).getMonth() + 1)\n                : new Date(timeStamp).getMonth() + 1\n        let DD =\n            new Date(timeStamp).getDate() < 10 ? '0' + new Date(timeStamp).getDate() : new Date(timeStamp).getDate()\n        let hh =\n            new Date(timeStamp).getHours() < 10 ? '0' + new Date(timeStamp).getHours() : new Date(timeStamp).getHours()\n        let mm =\n            new Date(timeStamp).getMinutes() < 10\n                ? '0' + new Date(timeStamp).getMinutes()\n                : new Date(timeStamp).getMinutes()\n        let ss =\n            new Date(timeStamp).getSeconds() < 10\n                ? '0' + new Date(timeStamp).getSeconds()\n                : new Date(timeStamp).getSeconds()\n        let todayStart = `${YY}-${MM}-${DD} 00:00:00`\n        let todayNow = `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n        console.log('todayStart', todayStart)\n        console.log('todayNow', todayNow)\n        console.log('type', typeof todayStart)\n        let res = [moment(todayStart), moment(todayNow)]\n        console.log('resssss', res)\n\n        let ress = [moment('2020-10-20 10:00:00'), moment('2020-10-21 12:00:00')]\n        setDState({\n            ...dState,\n            range: res\n        })\n    }\n\n    const onOk = value => {\n        console.log('okValue', value)\n    }\n\n    return (\n        <div className='user-acquisition'>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div style={{ fontSize: '18px', flex: 2 }}>User Acquisition</div>\n                <div style={{ flex: 1, paddingLeft: '50px' }}>\n                    <RangePicker\n                        ranges={{\n                            Today: [moment(), moment()],\n                            Yesterday: [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n                            'Last 7 days': [moment().subtract(6, 'days'), moment()],\n                            'Last 28 days': [moment().subtract(27, 'days'), moment()]\n                        }}\n                        // showTime={{ format: 'HH:mm:ss' }}\n                        // format=\"YYYY-MM-DD HH:mm:ss\"\n                        onChange={onChange}\n                        onOk={onOk}\n                        value={dState.range}\n                    />\n                </div>\n            </div>\n\n            <div style={{ padding: '20px 0 20px 40px' }} className='site-statistic-demo-card'>\n                <Row gutter={24} style={{ marginBottom: '10px' }}>\n                    <Col span={8}>\n                        <Statistic\n                            valueStyle={{ color: '#3f8600' }}\n                            title='Total user'\n                            value={state.acquisitionData.total_kol}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='New user'\n                            value={state.acquisitionData.today_kol}\n                            valueStyle={{ color: '#3f8600' }}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='New user with invitation code'\n                            value={state.acquisitionData.today_invited_kol}\n                            valueStyle={{ color: '#3f8600' }}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={24} style={{ marginBottom: '10px' }}>\n                    <Col span={8}>\n                        <Statistic title='DAU' value={state.acquisitionData.dau} valueStyle={{ color: '#cf1322' }} />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title='MAU' value={state.acquisitionData.mau} valueStyle={{ color: '#cf1322' }} />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title='AAU' value={state.acquisitionData.aau} valueStyle={{ color: '#cf1322' }} />\n                    </Col>\n                </Row>\n                <Row gutter={24}>\n                    <Col span={8}>\n                        <Statistic\n                            title='Invitation code generated'\n                            value={state.acquisitionData.total_invited_number}\n                            valueStyle={{ color: '#1890ff' }}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='Invitation code conversion'\n                            value={\n                                state.acquisitionData.conversion_rate\n                                    ? (state.acquisitionData.conversion_rate * 100).toFixed(0) + '%'\n                                    : '0%'\n                            }\n                            precision={2}\n                            valueStyle={{ color: '#1890ff' }}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='Invitation code used daily'\n                            value={state.acquisitionData.use_invited_number}\n                            valueStyle={{ color: '#1890ff' }}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={24}>\n                    <Col span={8}>\n                        <Statistic\n                            title='User Created'\n                            value={state.acquisitionData.user_created}\n                            valueStyle={{ color: '#3f8600' }}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='User activated'\n                            value={state.acquisitionData.user_activated}\n                            valueStyle={{ color: '#3f8600' }}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='Activated Rate'\n                            value={\n                                state.acquisitionData.activated_rate\n                                    ? (state.acquisitionData.activated_rate * 100).toFixed(0) + '%'\n                                    : '0%'\n                            }\n                            valueStyle={{ color: '#3f8600' }}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={24}>\n                    <Col span={8}>\n                        <Statistic\n                            title='Total Admin User Created'\n                            value={state.acquisitionData.total_user_created}\n                            valueStyle={{ color: '#cf1322' }}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='Total Admin User Activated'\n                            value={state.acquisitionData.total_user_activated}\n                            valueStyle={{ color: '#cf1322' }}\n                        />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic\n                            title='Total Activated Rate'\n                            value={\n                                state.acquisitionData.total_activated_rate\n                                    ? (state.acquisitionData.total_activated_rate * 100).toFixed(0) + '%'\n                                    : '0%'\n                            }\n                            valueStyle={{ color: '#cf1322' }}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={24}>\n                    <Col span={24}>\n                        <UserLine data={state.acquisitionData.kol_curve} />\n                    </Col>\n                </Row>\n            </div>\n        </div>\n    )\n}\n\nconst KolDemInfl = props => {\n    const [state, setState] = useState({\n        kolDemInfl: {}\n    })\n\n    const getKolDemInfl = () => {\n        APIGetKolDemInfl().then(resp => {\n            setState({\n                kolDemInfl: resp.data.data\n            })\n        })\n    }\n\n    useEffect(() => {\n        getKolDemInfl()\n    }, [])\n\n    return (\n        <div className='kol-dem-infl'>\n            <div style={{ fontSize: '18px' }}>Kol Demographic & influential</div>\n            <Row gutter={24} style={{ marginBottom: '10px' }}>\n                <Col span={8} style={{ padding: '0 0 0 30px' }}>\n                    <div>\n                        <div style={{ margin: '10px 0 10px 0', fontSize: '16px', color: '#00000073' }}>\n                            Gender disclosed {state.kolDemInfl.gender_disclosed_users} users\n                        </div>\n                        {state.kolDemInfl.sex_ratio &&\n                            state.kolDemInfl.sex_ratio.map((item, index) => {\n                                return (\n                                    <div\n                                        key={index}\n                                        style={{\n                                            paddingLeft: '15px',\n                                            borderBottom: ' 1px solid #eee',\n                                            width: '200px',\n                                            display: 'flex',\n                                            padding: '3px 0 3px 0'\n                                        }}>\n                                        <span style={{ width: '100px' }}>{item.key}</span>\n                                        <span style={{ marginLeft: '5px', color: '#1890ff', flex: '1' }}>\n                                            {(item.percentage * 100).toFixed(0) + '%'}\n                                        </span>\n                                    </div>\n                                )\n                            })}\n                    </div>\n                    <div>\n                        <div style={{ margin: '10px 0 10px 0', fontSize: '16px', color: '#00000073' }}>\n                            Language disclosed {state.kolDemInfl.language_disclosed_users} users{' '}\n                        </div>\n                        {state.kolDemInfl.language_ratio &&\n                            state.kolDemInfl.language_ratio.map((item, index) => {\n                                return (\n                                    <div\n                                        key={index}\n                                        style={{\n                                            borderBottom: ' 1px solid #eee',\n                                            width: '200px',\n                                            display: 'flex',\n                                            padding: '3px 0 3px 0'\n                                        }}>\n                                        <span style={{ width: '100px' }}>{item.key}</span>\n                                        <span style={{ marginLeft: '5px', color: '#cf1322', flex: '1' }}>\n                                            {(item.percentage * 100).toFixed(0) + '%'}\n                                        </span>\n                                    </div>\n                                )\n                            })}\n                    </div>\n                </Col>\n                <Col span={8} style={{ padding: '0 0 0 30px' }}>\n                    <div style={{ margin: '10px 0 10px 0', fontSize: '16px', color: '#00000073' }}>\n                        Follower's top location\n                    </div>\n                    {state.kolDemInfl.country_ratio &&\n                        state.kolDemInfl.country_ratio.map((item, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    style={{\n                                        padding: '3px 0 3px 0',\n                                        borderBottom: ' 1px solid #eee',\n                                        width: '200px',\n                                        display: 'flex'\n                                    }}>\n                                    <span style={{ width: '100px' }}>{item.key}</span>\n                                    <span style={{ marginLeft: '5px', color: '#3f8600', flex: '1' }}>\n                                        {(item.percentage * 100).toFixed(0) + '%'}\n                                    </span>\n                                </div>\n                            )\n                        })}\n                </Col>\n                <Col span={8} style={{ padding: '0 0 0 30px' }}>\n                    <div style={{ margin: '10px 0 10px 0', fontSize: '16px', color: '#00000073' }}>SKU Category</div>\n                    {state.kolDemInfl.category_ratio &&\n                        state.kolDemInfl.category_ratio.map((item, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    style={{\n                                        padding: '3px 0 3px 0',\n                                        borderBottom: ' 1px solid #eee',\n                                        width: '200px',\n                                        display: 'flex'\n                                    }}>\n                                    <span style={{ width: '100px' }}>{item.key}</span>\n                                    <span style={{ marginLeft: '5px', color: '#1890ff', flex: '1' }}>\n                                        {item.percentage * 100 + '%'}\n                                    </span>\n                                </div>\n                            )\n                        })}\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nconst UserLine = props => {\n    const [state, setState] = useState({\n        data: []\n    })\n\n    const transData = data => {\n        console.log('数据啊', data)\n\n        let resArr = []\n\n        for (let i in data) {\n            // resArr.concat({year:data[i].key, value:data[i].user_number, name:'user number'}, {year:data[i].key, value:data[i].activated_number, name:'activated number'})\n            resArr.push(\n                { year: data[i].key, value: data[i].user_number, name: 'new user ' },\n                // { year: data[i].key, value: data[i].create_number, name: 'create number' },\n                { year: data[i].key, value: data[i].activated_number, name: 'new active user' }\n            )\n        }\n        console.log('resArr...', resArr)\n        return resArr\n        // setState({\n        //     data: resArr\n        // })\n    }\n\n    const data = transData(props.data)\n\n    const config = {\n        title: {\n            visible: true,\n            text: 'User growth'\n        },\n        description: {\n            visible: true,\n            text: 'Growth over time'\n        },\n        padding: 'auto',\n        forceFit: true,\n        data: data,\n        xField: 'year',\n        yField: 'value',\n        seriesField: 'name',\n        label: {\n            visible: true,\n            type: 'point'\n        },\n        color: ['#3f8600', '#FAA219'],\n        point: {\n            visible: true,\n            size: 5,\n            shape: 'diamond'\n            // style: {\n            //     fill: 'white',\n            //     stroke: '#2593fc',\n            //     lineWidth: 2\n            // }\n        },\n        legend: { position: 'top' },\n        smooth: true,\n        animation: {\n            appear: {\n                animation: 'path-in',\n                duration: 5000\n            }\n        }\n    }\n\n    useEffect(() => {\n        // transData(props.data)\n    }, [])\n\n    return <Line {...config} />\n}\n\nconst FunnelC = props => {\n    useEffect(() => {\n        console.log('props..', props)\n\n        let myChart = echarts.init(document.getElementById('funnel'))\n        let resData =\n            props.data &&\n            props.data.map(item => {\n                return {\n                    value: item.number,\n                    name: item.key\n                }\n            })\n        console.log('resData', resData)\n        // resData = [\n        //     {value: 100, name: \"Total Task\"},\n        //     {value: 48, name: \"Activated\"},\n        //     {value: 39, name: \"Proof\"},\n        //     {value: 11, name: \"Complete\"}\n        // ]\n        myChart.setOption({\n            tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}  : {c}'\n            },\n            toolbox: {\n                feature: {\n                    dataView: { readOnly: false },\n                    restore: {},\n                    saveAsImage: {}\n                }\n            },\n            // legend: {\n            //     data: ['展现','点击','访问','咨询','订单']\n            // },\n\n            series: [\n                {\n                    name: '漏斗图',\n                    type: 'funnel',\n                    left: '10%',\n                    top: 60,\n                    bottom: 60,\n                    width: '80%',\n                    min: 0,\n                    // max:  resData?resData[0].value:1000,\n                    minSize: '0%',\n                    maxSize: '100%',\n                    sort: 'descending',\n                    gap: 2,\n                    label: {\n                        show: true,\n                        position: 'inside'\n                    },\n                    labelLine: {\n                        length: 10,\n                        lineStyle: {\n                            width: 1,\n                            type: 'solid'\n                        }\n                    },\n                    itemStyle: {\n                        borderColor: '#fff',\n                        borderWidth: 1\n                    },\n                    emphasis: {\n                        label: {\n                            fontSize: 20\n                        }\n                    },\n                    data: resData\n                }\n            ]\n        })\n        window.addEventListener('resize', function() {\n            myChart.resize()\n        })\n    }, [props])\n    return <div id='funnel' style={{ height: 300, width: 300, background: '#fff' }}></div>\n}\n\nconst CampaignPerformance = () => {\n    const [state, setState] = useState({\n        campaignPerformance: {},\n        defaultId: '',\n        selectCampaign: {}\n    })\n\n    const [dState, setDState] = useState({\n        range: [moment('2020-10-10 10:00:00'), moment('2020-10-11 12:00:00')]\n    })\n    const getCampaignPerformance = (begin, end) => {\n        if (begin && end) {\n            begin = `${begin} 00:00:00`\n            end = `${end} 23:59:59`\n        }\n        APGetCampaignPerformance({\n            begin: begin,\n            end: end\n        }).then(resp => {\n            let de = resp.data.data.campaign_task_rate[0].campaign_id\n            console.log('de', de)\n            setState({\n                ...state,\n                campaignPerformance: resp.data.data,\n                defaultId: de\n            })\n        })\n    }\n\n    const changeCampaign = (val, index) => {\n        console.log('val', val)\n        console.log('index', index)\n        let selectIndex = Number(index.key)\n        console.log('selectIndex', selectIndex)\n        console.log('tyty', state.campaignPerformance)\n        console.log('rrr', state.campaignPerformance.campaign_task_rate[selectIndex])\n        //    return\n        setState({\n            ...state,\n            selectCampaign: state.campaignPerformance.campaign_task_rate[selectIndex]\n        })\n    }\n\n    useEffect(() => {\n        getCampaignPerformance()\n        getTodayTime()\n    }, [])\n\n    const getTodayTime = () => {\n        let timeStamp = new Date()\n        let YY = new Date(timeStamp).getFullYear()\n        let MM =\n            new Date(timeStamp).getMonth() < 9\n                ? '0' + (new Date(timeStamp).getMonth() + 1)\n                : new Date(timeStamp).getMonth() + 1\n        let DD =\n            new Date(timeStamp).getDate() < 10 ? '0' + new Date(timeStamp).getDate() : new Date(timeStamp).getDate()\n        let hh =\n            new Date(timeStamp).getHours() < 10 ? '0' + new Date(timeStamp).getHours() : new Date(timeStamp).getHours()\n        let mm =\n            new Date(timeStamp).getMinutes() < 10\n                ? '0' + new Date(timeStamp).getMinutes()\n                : new Date(timeStamp).getMinutes()\n        let ss =\n            new Date(timeStamp).getSeconds() < 10\n                ? '0' + new Date(timeStamp).getSeconds()\n                : new Date(timeStamp).getSeconds()\n        let todayStart = `${YY}-${MM}-${DD} 00:00:00`\n        let todayNow = `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n        console.log('todayStart', todayStart)\n        console.log('todayNow', todayNow)\n        console.log('type', typeof todayStart)\n        let res = [moment(todayStart), moment(todayNow)]\n        console.log('resssss', res)\n\n        let ress = [moment('2020-10-20 10:00:00'), moment('2020-10-21 12:00:00')]\n        setDState({\n            ...dState,\n            range: res\n        })\n    }\n\n    const getAPIDownloadCampaign = () => {\n        let apiHref = APIDownloadCampaign()\n        let resHref = `${apiHref}?id=${state.selectCampaign.campaign_id}`\n        return resHref\n    }\n\n    const campaignOption =\n        state.campaignPerformance.campaign_task_rate &&\n        state.campaignPerformance.campaign_task_rate.map((item, index) => {\n            return (\n                <Option key={index} value={item.campaign_id}>\n                    {item.campaign_id},{item.title}\n                </Option>\n            )\n        })\n\n    const onOk = value => {\n        console.log('okValue', value)\n    }\n\n    const onChange = (value, dateString) => {\n        console.log('value', value)\n        console.log('dateString', dateString)\n        if (dateString) {\n            getCampaignPerformance(dateString[0], dateString[1])\n        }\n    }\n\n    return (\n        <div className=''>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div style={{ fontSize: '18px', flex: 1 }}>Campaign performance</div>\n                <div style={{ flex: 1, paddingLeft: '50px' }}>\n                    <RangePicker\n                        ranges={{\n                            Today: [moment(), moment()],\n                            Yesterday: [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n                            'Last 7 days': [moment().subtract(6, 'days'), moment()],\n                            'Last 28 days': [moment().subtract(27, 'days'), moment()]\n                        }}\n                        onChange={onChange}\n                        onOk={onOk}\n                        value={dState.range}\n                    />\n                </div>\n            </div>\n            <Row gutter={24} style={{ marginBottom: '10px', marginTop: '10px' }}>\n                <Col span={12} style={{ padding: '0 0 0 30px' }}>\n                    <Statistic\n                        valueStyle={{ color: '#3f8600' }}\n                        title='Total number of task'\n                        value={state.campaignPerformance.total_number_task}\n                    />\n                    <Statistic\n                        valueStyle={{ color: '#3f8600' }}\n                        title='Completion rate'\n                        value={\n                            state.campaignPerformance.completion_rate\n                                ? (state.campaignPerformance.completion_rate * 100).toFixed(0) + '%'\n                                : '0%'\n                        }\n                    />\n                    {state.campaignPerformance.task_rate &&\n                        state.campaignPerformance.task_rate.map((item, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    style={{\n                                        padding: '3px 0 3px 0',\n                                        borderBottom: ' 1px solid #eee',\n                                        width: '200px',\n                                        display: 'flex'\n                                    }}>\n                                    <span style={{ width: '100px' }}>{item.key}</span>\n                                    <span style={{ marginLeft: '5px', color: '#3f8600', flex: '1' }}>\n                                        {item.key == 'Total Task' ? item.number : item.number}\n                                    </span>\n                                    <span style={{ marginLeft: '5px', color: '#3f8600', flex: '1' }}>\n                                        {item.key == 'Total Task' ? '' : (item.percentage * 100).toFixed(0) + '%'}\n                                    </span>\n                                </div>\n                            )\n                        })}\n                    <FunnelC data={state.campaignPerformance.task_rate} />\n\n                    {/* <FunnelChart width={730} height={250}>\n                        <Tooltip />\n                        <Funnel\n                            dataKey=\"number\"\n                            data={state.campaignPerformance.task_rate}\n                            isAnimationActive\n                        >\n                            <LabelList position=\"right\" fill=\"#000\" stroke=\"none\" dataKey=\"name\" />\n                        </Funnel>\n                    </FunnelChart> */}\n                </Col>\n                <Col span={12} style={{ padding: '0 0 0 30px' }}>\n                    <Select\n                        style={{ width: '200px', marginBottom: '10px' }}\n                        defaultValue={state.defaultId}\n                        onChange={changeCampaign}>\n                        {campaignOption}\n                    </Select>\n                    <a\n                        style={{ backgroundColor: '#1890ff', color: '#fff', padding: '8px 15px', marginLeft: '10px' }}\n                        type='download'\n                        href={getAPIDownloadCampaign()}>\n                        download\n                    </a>\n\n                    <Statistic\n                        valueStyle={{ color: '#1890ff' }}\n                        title='Time to complete(day)'\n                        value={state.selectCampaign.time_to_conplete ? state.selectCampaign.time_to_conplete : 0}\n                    />\n                    {state.selectCampaign.task_rate &&\n                        state.selectCampaign.task_rate.map((item, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    style={{\n                                        padding: '3px 0 3px 0',\n                                        borderBottom: ' 1px solid #eee',\n                                        width: '200px',\n                                        display: 'flex'\n                                    }}>\n                                    <span style={{ width: '100px' }}>{item.key}</span>\n                                    <span style={{ marginLeft: '5px', color: '#1890ff', flex: '1' }}>\n                                        {item.number}\n                                    </span>\n                                    <span style={{ marginLeft: '5px', color: '#1890ff', flex: '1' }}>\n                                        {(item.percentage * 100).toFixed(0) + '%'}\n                                    </span>\n                                    {/* <span style={{ marginLeft: '5px', color: '#1890ff', flex: '1' }}>\n                                        {item.key == 'Total Task'\n                                            ? item.number\n                                            : (item.percentage * 100).toFixed(0) + '%'}\n                                    </span> */}\n                                </div>\n                            )\n                        })}\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nconst PendingTasks = props => {\n    const getPendingTasks = () => {\n        APIGetPendingTasks().then(resp => {\n            setState({\n                pendingTasks: resp.data.data\n            })\n        })\n    }\n\n    const [state, setState] = useState({\n        pendingTasks: []\n    })\n\n    useEffect(() => {\n        getPendingTasks()\n    }, [])\n\n    return (\n        <div className='pending-tasks'>\n            <div style={{ fontSize: '18px' }}>Pending tasks</div>\n            <div style={{ padding: '20px 0 0 30px' }}>\n                {state.pendingTasks &&\n                    state.pendingTasks.map((item, index) => {\n                        return (\n                            <div key={index}>\n                                {/* <span>{item.key}</span>\n                                <span style={{ marginLeft:'5px' }}>{item.number}</span>\n                                <span style={{marginLeft:'10px'}}>Lending time</span>\n                                <span>{item.average_time}hours</span> */}\n\n                                <Row gutter={24} style={{ marginBottom: '10px' }}>\n                                    <Col span={12}>\n                                        <Statistic\n                                            valueStyle={{ color: '#3f8600' }}\n                                            title={item.key}\n                                            value={item.number}\n                                        />\n                                    </Col>\n                                    <Col span={12}>\n                                        {item.average_time ? (\n                                            <Statistic\n                                                title='Leading time(hours)'\n                                                value={item.average_time}\n                                                valueStyle={{ color: '#1890ff' }}\n                                            />\n                                        ) : null}\n                                    </Col>\n                                </Row>\n                            </div>\n                        )\n                    })}\n            </div>\n        </div>\n    )\n}\n\nconst columns = () => [\n    {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        align: 'center'\n    },\n    {\n        title: 'Region',\n        dataIndex: 'region',\n        key: 'region',\n        align: 'center',\n        render: (text, item) => (\n            <>\n                {text &&\n                    JSON.parse(text).map((tag, index) => {\n                        let color = index == 1 ? 'volcano' : index == 2 ? 'volcano' : 'yellow'\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n            </>\n        )\n    },\n    {\n        title: 'Count ID',\n        dataIndex: 'countId',\n        key: 'countId',\n        align: 'center'\n    },\n    {\n        title: 'Approved sum',\n        dataIndex: 'approvedSum',\n        key: 'approvedSum',\n        align: 'center'\n    },\n    {\n        title: 'Rejected sum',\n        dataIndex: 'rejectedSum',\n        key: 'rejectedSum',\n        align: 'center'\n    }\n]\n\nconst expandedRowRender = data => {\n    const columns = edit => [\n        {\n            title: 'Campaign ID',\n            dataIndex: 'campaign_id',\n            key: 'campaign_id',\n            align: 'center'\n        },\n        {\n            title: 'Category',\n            dataIndex: 'category',\n            key: 'category',\n            align: 'center'\n        },\n        {\n            title: 'Language',\n            dataIndex: 'language',\n            key: 'language',\n            align: 'center'\n        },\n        {\n            title: 'Brand',\n            dataIndex: 'brand',\n            key: 'brand',\n            align: 'center'\n        },\n        {\n            title: 'Like',\n            dataIndex: 'like',\n            key: 'like',\n            align: 'center'\n        },\n        {\n            title: 'Count ID',\n            dataIndex: 'countId',\n            key: 'countId',\n            align: 'center'\n        },\n        {\n            title: 'Approved sum',\n            dataIndex: 'approvedSum',\n            key: 'approvedSum',\n            align: 'center'\n        },\n        {\n            title: 'Rejected sum',\n            dataIndex: 'rejectedSum',\n            key: 'rejectedSum',\n            align: 'center'\n        }\n    ]\n\n    return <Table columns={columns()} dataSource={data.child} bordered pagination={false} />\n}\n\nconst MuseAffliate = props => {\n    const [dState, setDState] = useState({\n        range: [moment('2020-10-10 10:00:00'), moment('2020-10-11 12:00:00')]\n    })\n    const [state, setState] = useState({\n        list: [\n            {\n                name: 'Muse Affliate',\n                count_id: 50,\n                approved_sum: 10,\n                rejected_sum: 10,\n                child: [\n                    {\n                        campaign_id: 10101,\n                        category: 'Jewelry',\n                        language: 'english',\n                        Brand: 'abcomo',\n                        like: '1',\n                        count_id: 50,\n                        approved_sum: 10,\n                        rejected_sum: 10\n                    },\n                    {\n                        campaign_id: 10102,\n                        category: 'Jewelry',\n                        language: 'english',\n                        Brand: 'abcomo',\n                        like: '1',\n                        count_id: 50,\n                        approved_sum: 10,\n                        rejected_sum: 10\n                    }\n                ]\n            }\n        ]\n    })\n\n    const onOk = value => {\n        console.log('okValue', value)\n    }\n\n    const getTaskRetention = (begin, end) => {\n        if (begin && end) {\n            begin = `${begin} 00:00:00`\n            end = `${end} 23:59:59`\n        }\n        APIGetTaskRetention({\n            beginStr: begin,\n            endStr: end\n        }).then(resp => {\n            setState({\n                list: resp.data.data\n            })\n        })\n    }\n\n    const getTodayTime = () => {\n        let timeStamp = new Date()\n        let YY = new Date(timeStamp).getFullYear()\n        let MM =\n            new Date(timeStamp).getMonth() < 9\n                ? '0' + (new Date(timeStamp).getMonth() + 1)\n                : new Date(timeStamp).getMonth() + 1\n        let DD =\n            new Date(timeStamp).getDate() < 10 ? '0' + new Date(timeStamp).getDate() : new Date(timeStamp).getDate()\n        let hh =\n            new Date(timeStamp).getHours() < 10 ? '0' + new Date(timeStamp).getHours() : new Date(timeStamp).getHours()\n        let mm =\n            new Date(timeStamp).getMinutes() < 10\n                ? '0' + new Date(timeStamp).getMinutes()\n                : new Date(timeStamp).getMinutes()\n        let ss =\n            new Date(timeStamp).getSeconds() < 10\n                ? '0' + new Date(timeStamp).getSeconds()\n                : new Date(timeStamp).getSeconds()\n        let todayStart = `${YY}-${MM}-${DD} 00:00:00`\n        let todayNow = `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n        console.log('todayStart', todayStart)\n        console.log('todayNow', todayNow)\n        console.log('type', typeof todayStart)\n        let res = [moment(todayStart), moment(todayNow)]\n        console.log('resssss', res)\n\n        let ress = [moment('2020-10-20 10:00:00'), moment('2020-10-21 12:00:00')]\n        setDState({\n            ...dState,\n            range: res\n        })\n    }\n\n    const onChange = (value, dateString) => {\n        console.log('value', value)\n        console.log('dateString', dateString)\n        if (dateString) {\n            getTaskRetention(dateString[0], dateString[1])\n        }\n        let resRange = [moment(dateString[0]), moment(dateString[1])]\n        setDState({\n            range: resRange\n        })\n    }\n\n    useEffect(() => {\n        // getTaskRetention()\n        getTodayTime()\n    }, [])\n\n    return (\n        <div className='muse-affliate'>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div style={{ fontSize: '18px', flex: 1, marginBottom: '20px' }}>Task operation report</div>\n                <div style={{ paddingLeft: '50px' }}>\n                    <RangePicker\n                        ranges={{\n                            Today: [moment(), moment()],\n                            Yesterday: [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n                            'Last 7 days': [moment().subtract(6, 'days'), moment()],\n                            'Last 28 days': [moment().subtract(27, 'days'), moment()]\n                        }}\n                        onChange={onChange}\n                        onOk={onOk}\n                        value={dState.range}\n                    />\n                </div>\n            </div>\n            <Table\n                columns={columns()}\n                expandable={{ expandedRowRender }}\n                dataSource={state.list}\n                scroll={{ scrollToFirstRowOnChange: true, x: 1000 }}\n                bordered\n            />\n        </div>\n    )\n}\n\nconst UserRetention = props => {\n    const [state, setState] = useState({\n        userRetention: {}\n    })\n\n    const [dState, setDState] = useState({\n        range: [moment('2020-10-10 10:00:00'), moment('2020-10-11 12:00:00')]\n    })\n\n    const getUserRetention = (begin, end) => {\n        if (begin && end) {\n            begin = `${begin} 00:00:00`\n            end = `${end} 23:59:59`\n        }\n        APIGetUserRetention({\n            begin: begin,\n            end: end\n        }).then(resp => {\n            setState({\n                userRetention: resp.data.data\n            })\n        })\n    }\n\n    const onOk = value => {\n        console.log('okValue', value)\n    }\n\n    const onChange = (value, dateString) => {\n        console.log('value', value)\n        console.log('dateString', dateString)\n        if (dateString) {\n            getUserRetention(dateString[0], dateString[1])\n        }\n        let resRange = [moment(dateString[0]), moment(dateString[1])]\n        setDState({\n            range: resRange\n        })\n    }\n\n    const getTodayTime = () => {\n        let timeStamp = new Date()\n        let YY = new Date(timeStamp).getFullYear()\n        let MM =\n            new Date(timeStamp).getMonth() < 9\n                ? '0' + (new Date(timeStamp).getMonth() + 1)\n                : new Date(timeStamp).getMonth() + 1\n        let DD =\n            new Date(timeStamp).getDate() < 10 ? '0' + new Date(timeStamp).getDate() : new Date(timeStamp).getDate()\n        let hh =\n            new Date(timeStamp).getHours() < 10 ? '0' + new Date(timeStamp).getHours() : new Date(timeStamp).getHours()\n        let mm =\n            new Date(timeStamp).getMinutes() < 10\n                ? '0' + new Date(timeStamp).getMinutes()\n                : new Date(timeStamp).getMinutes()\n        let ss =\n            new Date(timeStamp).getSeconds() < 10\n                ? '0' + new Date(timeStamp).getSeconds()\n                : new Date(timeStamp).getSeconds()\n        let todayStart = `${YY}-${MM}-${DD} 00:00:00`\n        let todayNow = `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n        console.log('todayStart', todayStart)\n        console.log('todayNow', todayNow)\n        console.log('type', typeof todayStart)\n        let res = [moment(todayStart), moment(todayNow)]\n        console.log('resssss', res)\n\n        let ress = [moment('2020-10-20 10:00:00'), moment('2020-10-21 12:00:00')]\n        setDState({\n            ...dState,\n            range: res\n        })\n    }\n\n    useEffect(() => {\n        getUserRetention()\n        getTodayTime()\n    }, [])\n\n    return (\n        <div className='user-retention'>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div style={{ fontSize: '18px', flex: 1 }}>User Retention</div>\n                <div style={{ flex: 1, paddingLeft: '50px' }}>\n                    <RangePicker\n                        ranges={{\n                            Today: [moment(), moment()],\n                            Yesterday: [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n                            'Last 7 days': [moment().subtract(6, 'days'), moment()],\n                            'Last 28 days': [moment().subtract(27, 'days'), moment()]\n                        }}\n                        onChange={onChange}\n                        onOk={onOk}\n                        value={dState.range}\n                    />\n                </div>\n            </div>\n            <Row gutter={24} style={{ marginBottom: '10px' }}>\n                <Col span={12} style={{ padding: '0 0 0 30px' }}>\n                    <div style={{ margin: '10px 0 10px 0', fontSize: '16px', color: '#00000073' }}>\n                        Repeated campaign paticipant{' '}\n                    </div>\n                    {state.userRetention.repeated_campain_paticipant &&\n                        state.userRetention.repeated_campain_paticipant.map((item, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    style={{\n                                        paddingLeft: '15px',\n                                        borderBottom: ' 1px solid #eee',\n                                        width: '280px',\n                                        display: 'flex',\n                                        padding: '3px 0 3px 0'\n                                    }}>\n                                    <span style={{ width: '130px' }}>{item.key}</span>\n                                    <span style={{ marginLeft: '5px', color: '#3f8600', flex: '1' }}>\n                                        {item.number}\n                                    </span>\n                                    {/* <span style={{ marginLeft:'5px',color:'#1890ff',flex:'1' }}>{(item.percentage*100).toFixed(0) + '%'}</span> */}\n                                </div>\n                            )\n                        })}\n                </Col>\n                <Col span={12} style={{ padding: '0 0 0 30px' }}>\n                    <div style={{ display: 'flex', marginTop: '10px' }}>\n                        <Statistic\n                            valueStyle={{ color: '#3f8600' }}\n                            title='Campaign viewed'\n                            value={state.userRetention.campaign_viewed_today}\n                        />\n                        <Statistic\n                            style={{ marginLeft: '10px' }}\n                            title='Task created'\n                            value={state.userRetention.task_created_today}\n                            valueStyle={{ color: '#1890ff' }}\n                        />\n                    </div>\n                    <div style={{ margin: '10px 0 10px 0', fontSize: '16px', color: '#00000073' }}>\n                        Campaign task conversion{' '}\n                    </div>\n                    <div\n                        style={{\n                            paddingLeft: '15px',\n                            borderBottom: ' 1px solid #eee',\n                            width: '380px',\n                            display: 'flex',\n                            padding: '3px 0 3px 0'\n                        }}>\n                        <span style={{ width: '130px' }}>Campaign title</span>\n                        <span style={{ marginLeft: '5px', flex: '1' }}>Viewed number</span>\n                        <span style={{ marginLeft: '5px', flex: '1' }}>Task number</span>\n                    </div>\n                    <div style={{ maxHeight: '160px', overflowY: 'scroll' }}>\n                        {state.userRetention.campaign_task_conversion &&\n                            state.userRetention.campaign_task_conversion.map((item, index) => {\n                                return (\n                                    <div\n                                        key={index}\n                                        style={{\n                                            paddingLeft: '15px',\n                                            borderBottom: ' 1px solid #eee',\n                                            width: '380px',\n                                            display: 'flex',\n                                            padding: '3px 0 3px 0'\n                                        }}>\n                                        <span style={{ width: '130px' }}>{item.campaign_title}</span>\n                                        <span\n                                            style={{\n                                                marginLeft: '5px',\n                                                color: '#3f8600',\n                                                flex: '1',\n                                                textAlign: 'center'\n                                            }}>\n                                            {item.viewed_number}\n                                        </span>\n                                        <span\n                                            style={{\n                                                marginLeft: '5px',\n                                                color: '#1890ff',\n                                                flex: '1',\n                                                textAlign: 'center'\n                                            }}>\n                                            {item.task_number}\n                                        </span>\n                                    </div>\n                                )\n                            })}\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nconst Index = props => {\n    const [state, setState] = useState({\n        loading: true\n    })\n\n    useEffect(() => {\n        console.log('xixi')\n        var iframe = document.getElementById('commandIframe')\n        if (iframe.attachEvent) {\n            // 兼容IE写法\n            iframe.attachEvent('onload', function() {\n                // iframe加载完成后要进行的操作\n                setState({\n                    loading: false\n                })\n            })\n        } else {\n            iframe.onload = function() {\n                // iframe加载完成后要进行的操作\n                setState({\n                    loading: false\n                })\n            }\n        }\n    })\n\n    return (\n        <Layout className='index animated fadeIn'>\n            {state.loading ? <Spin indicator={antIcon} style={{ marginTop: '200px' }} /> : null}\n            <iframe\n                id='commandIframe'\n                style={{ minHeight: '1700px', border: 'none' }}\n                src='https://anystarr.s3.eu-west-3.amazonaws.com/admin_h5/AdminLTE-3.1.0/pages/examples/blank.html'></iframe>\n            {/* <div className='base-style-new'>\n                <UserAcquisition />\n            </div>\n            <div className='base-style-new'>\n                <KolDemInfl />\n            </div>\n            <div className='base-style-new'>\n                <CampaignPerformance />\n            </div>\n            <div className='base-style-new'>\n                <PendingTasks />\n            </div>\n            <div className='base-style-new'>\n                <UserRetention />\n            </div>\n            <div className='base-style-new'>\n                <MuseAffliate />\n            </div> */}\n        </Layout>\n    )\n}\n\nexport default Index\n","import Statistic from './Statistic.jsx'\n\nexport default Statistic"],"sourceRoot":""}