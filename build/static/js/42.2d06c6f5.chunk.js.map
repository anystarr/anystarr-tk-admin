{"version":3,"sources":["api/index.js","views/EmailTemDetail/EmailTemDetail.jsx","views/EmailTemDetail/index.js","api/config.js","components/WebBreadcrumbNew/WebBreadcrumbNew.jsx","components/WebBreadcrumbNew/index.js"],"names":["token","localStorage","getItem","request","axios","create","baseURL","BASEURL","timeout","defaults","headers","post","interceptors","use","config","Authorization","error","Promise","reject","response","status","resolve","console","log","layout","RangePicker","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Option","MerchantDetail","props","useState","id","fullName","displayName","logo","category","typeTemplate","state","setState","useForm","form","name","value","getTemplateType","editorState","outputHTML","val","APIMessageTemType","then","resp","resTypeTemplate","i","data","messageTypes","push","label","Number","useEffect","match","params","APIGetEmailTemDetail","setFieldsValue","messageTemplate","className","WebBreadcrumbNew","title","initialValues","remember","onFinish","values","APIModifyEmailTem","JSON","stringify","history","APICreateEmailTem","onFinishFailed","errorInfo","Item","disabled","onChange","type","length","map","item","index","key","rows","htmlType","style","marginLeft","EmailTemDetail","WebBreadcrumb","arr","src","Aset","alt"],"mappings":"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","file":"static/js/42.2d06c6f5.chunk.js","sourcesContent":["import axios from 'axios';\n\nimport { BASEURL } from '@/api/config'\n\n// 这里取决于登录的时候将 token 存储在哪里\nconst token = localStorage.getItem('token');\n\nconst request = axios.create({\n    baseURL: BASEURL,\n    timeout: 5000\n})\n\n// 设置post请求头\nrequest.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\n\n// 添加请求拦截器\nrequest.interceptors.request.use(\n    config => {\n        // 将 token 添加到请求头\n        token && (config.headers.Authorization = token)\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    }\n)\n\n// 添加响应拦截器\nrequest.interceptors.response.use(\n    response => {\n        if (response.status === 200) {\n            return Promise.resolve(response)\n        } else {\n            return Promise.reject(response)\n        }\n    },\n    error => {\n        // 相应错误处理\n        // 比如： token 过期， 无权限访问， 路径不存在， 服务器问题等\n        if(error.response && error.response.status) {\n            switch (error.response.status) {\n                case 401:\n                    break\n                case 403:\n                    break\n                case 404:\n                    break\n                case 500:\n                    break\n                default:\n                    console.log('其他错误信息')\n            }\n        }\n        return Promise.reject(error)\n    }\n)\n\nexport default request\n","import React, { useState, useEffect } from 'react'\nimport {\n    Layout,\n    Row,\n    Col,\n    Divider,\n    Select,\n    Form,\n    Input,\n    Button,\n    Checkbox,\n    message,\n    Switch,\n    DatePicker,\n    Upload\n} from 'antd'\nimport moment from 'moment'\nimport WebBreadcrumbNew from '@/components/WebBreadcrumbNew'\nimport '@/style/view-style/index.less'\nimport {\n    APIcreateArea,\n    APIGetCountryList,\n    APICreateModifyCampaign,\n    APIUploadFile,\n    APIUploadPromoCode,\n    APICreateOrModifyMerchant,\n    APIGetEmailTemDetail,\n    APICreateEmailTem,\n    APIModifyEmailTem,\n    APIMessageTemType\n} from '@/mapi'\nimport axios from '@/api'\nimport { API } from '@/api/config'\n// import { withRouter } from \"react-router-dom\";\nimport { UploadOutlined, InboxOutlined, DeleteOutlined } from '@ant-design/icons'\nimport BraftEditor from 'braft-editor'\nimport 'braft-editor/dist/index.css'\nimport { type } from 'koa/lib/request'\nconst { RangePicker } = DatePicker\n\nconst layout = {\n    labelCol: {\n        span: 8\n    },\n    wrapperCol: {\n        span: 16\n    }\n}\nconst tailLayout = {\n    wrapperCol: {\n        offset: 10,\n        span: 16\n    }\n}\n\nconst rangeConfig = {\n    rules: [{ type: 'array', required: true, message: 'Please select time!' }]\n}\nconst config = {\n    rules: [\n        {\n            type: 'object',\n            required: true,\n            message: 'Please select time!'\n        }\n    ]\n}\n\nconst { TextArea } = Input\n\nconst { Option } = Select\n\nconst template1 =\n    'step1: apply and receive exclusion discount code ; step2:share on social ; step3:Upload proof(Screenshots and links) to AnyStarr'\n\nconst MerchantDetail = props => {\n    const [state, setState] = useState({\n        id: '12',\n        fullName: 'hhh',\n        displayName: 'display',\n        logo: '',\n        category: 1,\n        typeTemplate: []\n    })\n    const [form] = Form.useForm()\n    const [country, setCountry] = useState([{ name: 'china', value: '1' }])\n    const [language, setLanguage] = useState([\n        { name: 'Chinese', value: '1' },\n        { name: 'English', value: '2' }\n    ])\n    const [merchant, setMerchant] = useState([{ name: 'merchant1', value: '1' }])\n    const [taskDes, setTaskDes] = useState(' ')\n    const [promoCode, setPromoCode] = useState([])\n\n    let { editorState, outputHTML } = state\n\n    let editorChange = editorState => {\n        setState(prevState => {\n            return { ...prevState, editorState, outputHTML: editorState.toHTML() }\n        })\n    }\n\n    const saveDraft = () => {\n        console.log('saveDraft')\n    }\n\n    const onFinish = values => {\n        values = {\n            ...values\n        }\n        console.log('props.match.params.id', props.match.params.id)\n        if (props.match.params.id !== '0') {\n            console.log('edit')\n            APIModifyEmailTem(JSON.stringify(values)).then(resp => {\n                props.history.push('/campaigns_ma/email_tem')\n            })\n        } else {\n            APICreateEmailTem(JSON.stringify(values)).then(resp => {\n                props.history.push('/campaigns_ma/email_tem')\n            })\n        }\n    }\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo)\n        // this.props.history.push(\"/index\");\n    }\n\n    const normFile = e => {\n        console.log('Upload event:', e)\n\n        if (Array.isArray(e)) {\n            return e\n        }\n\n        return e && e.fileList\n    }\n\n    const getCountryList = () => {\n        APIGetCountryList().then(resp => {\n            setCountry(resp.data.data)\n        })\n    }\n\n    const setTaskDescription = () => {}\n\n    const initForm = () => {\n        if (props.match.params.id) {\n            APIGetEmailTemDetail({ id: props.match.params.id }).then(resp => {\n                form.setFieldsValue({\n                    ...resp.data.messageTemplate\n                })\n            })\n        }\n    }\n\n    const setTaskDesValueTo = data => {\n        console.log('大医院', data)\n        let resArr = data.split(';')\n        console.log('resArrrrrr', resArr)\n    }\n\n    const setTypeTo = data => {\n        console.log('setTypeTo', data)\n        if (data == '1') {\n            setTaskDes(template1)\n        }\n        setState({\n            ...state,\n            type: data\n        })\n    }\n\n    const uploadProps = {\n        name: 'file',\n        action: 'http://any.clubchopp.com/any-starr/common/upload/upload_pic',\n        withCredentials: true,\n        headers: {\n            authorization: 'authorization-text'\n        },\n        onChange(info) {\n            if (info.file.status !== 'uploading') {\n                console.log(info.file, info.fileList)\n            }\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`)\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`)\n            }\n        }\n    }\n\n    const deleteFile = index => {\n        let bannerList = state.bannerList\n        bannerList.splice(index, 1)\n        setState({\n            ...state,\n            bannerList: bannerList\n        })\n    }\n\n    const uploadFile = ({ file, onSuccess }) => {\n        // uid: '-1',\n        //     name: 'xxx.png',\n        //     status: 'done',\n        //     url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'\n        APIUploadFile({ file: file }).then(resp => {\n            onSuccess()\n            setState({\n                logo: resp.data.url\n            })\n        })\n    }\n\n    const uploadPromoCode = ({ file, onSuccess }) => {\n        APIUploadPromoCode({ file: file }).then(resp => {\n            onSuccess()\n            setPromoCode(resp.data.data)\n        })\n    }\n    const getTemplateType = val => {\n        APIMessageTemType(val).then(resp => {\n            let resTypeTemplate = []\n            for (let i in resp.data.messageTypes) {\n                resTypeTemplate.push({\n                    label: resp.data.messageTypes[i],\n                    value: Number(i)\n                })\n            }\n            console.log('typeTemplate', resTypeTemplate)\n            setState({\n                ...state,\n                typeTemplate: resTypeTemplate\n            })\n        })\n    }\n\n    const changeCategory = val => {\n        setState({\n            ...state,\n            category: val\n        })\n        getTemplateType({ type: val })\n    }\n\n    useEffect(() => {\n        // getCountryList()\n        getTemplateType()\n        initForm()\n    }, [])\n\n    return (\n        <Layout className='animated fadeIn'>\n            <WebBreadcrumbNew title='Email Template detail' />\n            <div className='base-style base-detail' id='demoline'>\n                <Row>\n                    <Col span={24}>\n                        <Form\n                            {...layout}\n                            name='basic'\n                            initialValues={{\n                                remember: true\n                            }}\n                            form={form}\n                            onFinish={onFinish}\n                            onFinishFailed={onFinishFailed}>\n                            <Row>\n                                <Col span={18}>\n                                    <Form.Item label='Merchant ID' name='id'>\n                                        <Input disabled />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={18}>\n                                    <Form.Item label='Category' name='category'>\n                                        <Select\n                                            onChange={changeCategory}\n                                            disabled={props.match.params.id !== '0' ? true : false}>\n                                            <Option value={1}>Email Template</Option>\n                                            <Option value={2}>Notification Template</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={18}>\n                                    <Form.Item label='Type' name='type'>\n                                        <Select>\n                                            {/* <Option value={1}>Verification code email</Option>\n                                            <Option value={2}>welcome email</Option>\n                                            <Option value={3}>activation email</Option>\n                                            <Option value={4}>Customer service reply email</Option>\n                                            <Option value={5}>xixi</Option> */}\n                                            {state.typeTemplate.length &&\n                                                state.typeTemplate.map((item, index) => {\n                                                    return (\n                                                        <Option key={item.label} value={item.value}>\n                                                            {item.label}\n                                                        </Option>\n                                                    )\n                                                })}\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={18}>\n                                    <Form.Item label='Language' name='language'>\n                                        <Select>\n                                            <Option value={1}>English</Option>\n                                            <Option value={2}>French</Option>\n                                            <Option value={3}>Spanish</Option>\n                                            <Option value={4}>Polish</Option>\n                                            <Option value={5}>Portuguese</Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={18}>\n                                    <Form.Item label='Title' name='title'>\n                                        <Input />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={18}>\n                                    <Form.Item label='Content' name='content'>\n                                        <TextArea rows={10} />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Form.Item {...tailLayout}>\n                                <div>\n                                    <Button type='primary' htmlType='submit' style={{ marginLeft: '30px' }}>\n                                        Save\n                                    </Button>\n                                </div>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </div>\n        </Layout>\n    )\n}\n\nexport default MerchantDetail\n","import EmailTemDetail from './EmailTemDetail.jsx'\nexport default EmailTemDetail\n","export const API = 'http://149.28.152.251:9001/v1'\n\nexport const BASEURL = 'http://149.28.152.251:9001/v1'\n","import React, { Component, useEffect, useState } from 'react'\nimport { Table, Button, Modal, Checkbox } from 'antd'\nimport WebBreadcrumb from '../WebBreadcrumb'\nimport Aset from '@/imgs/aset1.png'\n\nconst WebBreadcrumbNew = ({ title }) => {\n    return (\n        <div className='web-bread-c'>\n            <WebBreadcrumb arr={[title]} />\n            <h3>{title}</h3>\n            <img src={Aset} className='aset' alt='aset' />\n        </div>\n    )\n}\n\nexport default WebBreadcrumbNew\n","import WebBreadcrumbNew from './WebBreadcrumbNew.jsx'\n\nexport default WebBreadcrumbNew\n"],"sourceRoot":""}