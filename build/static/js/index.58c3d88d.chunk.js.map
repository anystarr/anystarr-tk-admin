{"version":3,"sources":["views/Index/Index.jsx","views/Index/index.js","views/TiktokUserList/TiktokUser.jsx","views/TiktokUserList/index.js","views/EventList/TiktokUser.jsx","views/EventList/index.js"],"names":["Index","useState","useEffect","className","span","style","textAlign","fontSize","Option","MonthPicker","RangePicker","searchLayout","label","value","map","option","index","key","labelCol","wrapperCol","SearchBar","props","useForm","form","name","onFinish","values","changeSearch","gutter","Item","icon","SearchOutlined","type","htmlType","loading","margin","onClick","resetFields","SearchTableView","list","pagination","current","pageSize","search","visible","disabled","formData","startRow","userId","downloadUserUrl","state","setState","getList","page","searchName","APIGetTikTokUserList","JSON","stringify","then","resp","data","result","records","total","finally","WebBreadcrumb","arr","src","Aset","columns","title","dataIndex","align","render","text","item","rowKey","record","dataSource","onChange","console","log","bordered","scroll","scrollToFirstRowOnChange","x","TiktokUser","StatusOptions","DetailModal","onCreate","onCancel","okText","cancelText","onOk","validateFields","catch","info","rules","required","id","params","apiHref","APIDownloadUserNew","json","resHref","APIGetUserList","userJson","getCleanedParams","getKeyList","pager","start_row","encodeURI","err","APIModifyUserStatus","status","page_size","prevStatus","marginBottom","backgroundColor","color","padding","marginLeft","href","CloudDownloadOutlined","history","push","customRequest","file","onSuccess","window","confirm","APIbatchUploadUserList","success","UploadOutlined","rowSelection","EventList"],"mappings":"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","file":"static/js/index.58c3d88d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Layout, Row, Col, Divider } from 'antd'\nimport {\n    WechatOutlined,\n    QqOutlined,\n    DingdingOutlined,\n    WeiboCircleOutlined,\n    FullscreenOutlined\n} from '@ant-design/icons'\nimport screenfull from 'screenfull'\nimport '@/style/view-style/index.less'\nimport BarEcharts from './bar.jsx'\nimport PieEcharts from './pie.jsx'\nimport LineEcharts from './line.jsx'\nimport ScatterEcharts from './scatter.jsx'\nimport PictorialBarEcharts from './pictorialBar.jsx'\nimport { APIgetSysConfig } from '@/mapi'\nimport { render } from 'react-dom'\n\nconst Mouse = props => {\n    const [state, setState] = useState({\n        x: 0,\n        y: 0\n    })\n\n    const handleMouseMove = event => {\n        console.log('22')\n        setState({\n            x: event.clientX,\n            y: event.clientY\n        })\n    }\n\n    return (\n        <div style={{ height: '100%', backgroundColor: 'red' }} onMouseMove={handleMouseMove}>\n            {' '}\n            {props.render(state)}{' '}\n        </div>\n    )\n}\n\nconst Index = () => {\n    const fullToggle = () => {\n        if (screenfull.isEnabled) {\n            screenfull.request(document.getElementById('bar'))\n        }\n    }\n\n    const [str, setStr] = useState('')\n\n    const showhtml = htmlString => {\n        var html = { __html: htmlString }\n        return <div dangerouslySetInnerHTML={html} />\n    }\n\n    const getHomeConfig = () => {\n        APIgetSysConfig({\n            limit: 10,\n            offset: 0\n        })\n            .then(res => {\n                let config = res.data.filter(item => {\n                    return item.key === 'system_title'\n                })\n                setStr(config[0].value)\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    useEffect(() => {\n        // getHomeConfig()\n    }, [])\n\n    return (\n        <Layout className='index animated fadeIn'>\n            <Row>\n                {/* <Col span={24}><div className=\"base-style\">{showhtml(str)}</div></Col> */}\n                <Col span={24}>\n                    <p style={{ textAlign: 'center', fontSize: '16px' }}>Welcome to anyStarr </p>\n                    {/* <Mouse render={({x, y}) => (<h1>the mouse position is ({x},{y})</h1>)} /> */}\n                </Col>\n            </Row>\n        </Layout>\n    )\n}\n\nexport default Index\n","import Index from './Index.jsx'\n\nexport default Index\n","import React, { Component, useEffect, useState } from 'react'\nimport WebBreadcrumb from '@/components/WebBreadcrumb'\nimport {\n    Layout,\n    Row,\n    Col,\n    Tag,\n    Table,\n    Button,\n    Modal,\n    Input,\n    Form,\n    DatePicker,\n    Select,\n    message,\n    Upload,\n    Badge\n} from 'antd'\nimport '@/style/view-style/table.less'\nimport {\n    APIexportRewardRecord,\n    APIGetUserList,\n    APIDownloadUser,\n    APIModifyUserStatus,\n    APIbatchUploadUserList,\n    APIDownloadUserNew,\n    APISendActiveEmail\n} from '@/mapi'\nimport { getKeyList } from '@/tools/action.js'\nimport { UploadOutlined, FormOutlined, CloudDownloadOutlined, SearchOutlined } from '@ant-design/icons'\nimport webhost from '@/tools/webhost.js'\nimport Aset from '@/imgs/aset1.png'\nimport { getYearMonthDayTimeNew, getCleanedParams } from '@/tools/help.js'\nimport {APIGetTikTokUserList} from \"../../mapi\";\nconst { MonthPicker, RangePicker } = DatePicker\nconst { Option } = Select\n\nconst statusList = [\n    { label: 'Active', value: '1' },\n    { label: 'Banned', value: '2' },\n    { label: 'Locked', value: '5' }\n]\n\nconst StatusOptions = statusList.map((option, index) => {\n    return (\n        <Option key={index} value={option.value}>\n            {option.label}\n        </Option>\n    )\n})\n\nconst getLocalTime = nS => {\n    return new Date(Date.parse(nS)).toLocaleString().replace(/:\\d{1,2}$/, ' ')\n}\n\nconst columns = () => [\n    {\n        title: 'Avatar',\n        dataIndex: 'id',\n        key: 'id',\n        align: 'center',\n        render: (text, item) => <span className='table-id'>{text}</span>\n    },\n    {\n        title: 'Nick Name',\n        dataIndex: 'sendEmail',\n        key: 'sendEmail',\n        align: 'center'\n    },\n    {\n        title: 'Email',\n        dataIndex: 'email',\n        key: 'email',\n        align: 'center'\n    },\n    {\n        title: 'Register date',\n        dataIndex: 'invitation_code',\n        key: 'invitation_code',\n        align: 'center'\n    },\n    {\n        title: 'Registered Time',\n        dataIndex: 'status',\n        key: 'status',\n        align: 'center',\n    },\n    {\n        title: 'Followers',\n        dataIndex: 'create_time',\n        key: 'create_time',\n        align: 'center'\n        // render: (text, item) => <span>{getLocalTime(item.create_time)}</span>\n    },\n    {\n        title: 'Action',\n        dataIndex: 'id1',\n        key: 'id1',\n        align: 'center',\n    }\n]\n\nconst searchLayout = {\n    labelCol: {\n        span: 8\n    },\n    wrapperCol: {\n        span: 16\n    }\n}\n\nconst SearchBar = props => {\n    const [form] = Form.useForm()\n\n    const onFinish = values => {\n        props.changeSearch(values)\n    }\n\n    return (\n        <Form\n            {...searchLayout}\n            form={form}\n            name='advanced_search'\n            className='ant-advanced-search-form'\n            onFinish={onFinish}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Form.Item name='searchName' label='Nick Name'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                <Col span={24} style={{ textAlign: 'right' }}>\n                    <Button icon={<SearchOutlined />} type='primary' htmlType='submit' loading={props.loading}>\n                        Search\n                    </Button>\n                    <Button\n                        style={{ margin: '0 8px' }}\n                        onClick={() => {\n                            form.resetFields()\n                        }}>\n                        Reset\n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n    )\n}\n\nconst DetailModal = ({ visible, onCreate, onCancel }) => {\n    const [form] = Form.useForm()\n\n    const [user, setUser] = useState({})\n    const [allMemVisible, setAllMemVisible] = useState(false)\n\n    const layout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 14 }\n    }\n    const rangeConfig = {\n        rules: [\n            {\n                type: 'array',\n                message: 'Please select time!'\n            }\n        ]\n    }\n\n    useEffect(() => {}, [])\n\n    return (\n        <Modal\n            visible={visible}\n            title=''\n            okText='Submit'\n            cancelText='Cancel'\n            onCancel={onCancel}\n            onOk={() => {\n                form.validateFields()\n                    .then(values => {\n                        form.resetFields()\n                        onCreate(values)\n                    })\n                    .catch(info => {\n                        console.log('Validate Failed:', info)\n                    })\n            }}>\n            <Form {...layout} form={form} name='form_in_modal'>\n                <Form.Item name='status' label='status' rules={[{ required: true }]}>\n                    <Select>{StatusOptions}</Select>\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}\n\nconst SearchTableView = props => {\n    const [state, setState] = useState({\n        list: [],\n        pagination: {\n            current: 1,\n            pageSize: 20\n        },\n        search: {},\n        loading: true,\n        visible: false,\n        disabled: false,\n        formData: {},\n        startRow: 0,\n        userId: '',\n        downloadUserUrl: ''\n    })\n\n    useEffect(() => {\n      getList(1, 20);\n    }, [])\n\n    const getList = (page, pageSize, searchName) => {\n      APIGetTikTokUserList(JSON.stringify({\n        page,\n        pageSize,\n        searchName\n      })).then(resp=>{\n        if(resp.data.result.records){\n          setState({\n            ...state,\n            list:resp.data.result.records,\n            pagination: {\n              ...state.pagination,\n              total: resp.data.result.total\n            }\n          })\n        }\n      }).finally(()=>{\n        setState({\n          ...state,\n          loading:false\n        })\n      })\n    }\n\n    const handleChange = pagination => {\n      console.log(pagination, \"currentcurrentcurrent\")\n        getList(pagination.current, pagination.pageSize, state.search.searchName)\n    }\n\n    const changeSearch = search => {\n        setState({\n            ...state,\n            ...search\n        })\n        getList(1, state.pagination.pageSize, search.searchName)\n    }\n\n    return (\n        <Layout className='animated fadeIn'>\n            <div className='web-bread-c'>\n                <WebBreadcrumb arr={['User List']} />\n                <h3>User List</h3>\n                <img src={Aset} className='aset' />\n            </div>\n            <div className='base-wr'>\n                <div className='base-style'>\n                    <SearchBar changeSearch={changeSearch} loading={state.loading} />\n                </div>\n                <Row>\n                    <Col span={24}>\n                        <div className='base-style'>\n                            <Table\n                                columns={columns()}\n                                rowKey={record => record.key}\n                                dataSource={state.list}\n                                onChange={handleChange}\n                                bordered\n                                loading={state.loading}\n                                pagination={state.pagination}\n                                scroll={{ scrollToFirstRowOnChange: true, x: 1000 }}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </Layout>\n    )\n}\n\nexport default SearchTableView\n","import TiktokUser from './TiktokUser.jsx'\n\nexport default TiktokUser\n","import React, { Component, useEffect, useState } from 'react'\nimport WebBreadcrumb from '@/components/WebBreadcrumb'\nimport {\n    Layout,\n    Row,\n    Col,\n    Tag,\n    Table,\n    Button,\n    Modal,\n    Input,\n    Form,\n    DatePicker,\n    Select,\n    message,\n    Upload,\n    Badge\n} from 'antd'\nimport '@/style/view-style/table.less'\nimport {\n    APIexportRewardRecord,\n    APIGetUserList,\n    APIDownloadUser,\n    APIModifyUserStatus,\n    APIbatchUploadUserList,\n    APIDownloadUserNew,\n    APISendActiveEmail\n} from '@/mapi'\nimport { getKeyList } from '@/tools/action.js'\nimport { UploadOutlined, FormOutlined, CloudDownloadOutlined, SearchOutlined } from '@ant-design/icons'\nimport webhost from '@/tools/webhost.js'\nimport Aset from '@/imgs/aset1.png'\nimport { getYearMonthDayTimeNew, getCleanedParams } from '@/tools/help.js'\nconst { MonthPicker, RangePicker } = DatePicker\nconst { Option } = Select\n\nconst statusList = [\n    { label: 'Active', value: '1' },\n    { label: 'Banned', value: '2' },\n    { label: 'Locked', value: '5' }\n]\n\nconst StatusOptions = statusList.map((option, index) => {\n    return (\n        <Option key={index} value={option.value}>\n            {option.label}\n        </Option>\n    )\n})\n\nconst getLocalTime = nS => {\n    return new Date(Date.parse(nS)).toLocaleString().replace(/:\\d{1,2}$/, ' ')\n}\n\nconst columns = (edit, changeStatus, sendEmail, emailLoading) => [\n    {\n        title: 'Nick Name',\n        dataIndex: 'sendEmail',\n        key: 'sendEmail',\n        align: 'center'\n    },\n    {\n        title: 'Event Name',\n        dataIndex: 'email',\n        key: 'email',\n        align: 'center'\n    },\n    {\n        title: 'Target object',\n        dataIndex: 'invitation_code',\n        key: 'invitation_code',\n        align: 'center'\n    },\n    {\n        title: 'Create time',\n        dataIndex: 'create_time',\n        key: 'create_time',\n        align: 'center'\n        // render: (text, item) => <span>{getLocalTime(item.create_time)}</span>\n    }\n]\n\nconst searchLayout = {\n    labelCol: {\n        span: 8\n    },\n    wrapperCol: {\n        span: 16\n    }\n}\n\nconst SearchBar = props => {\n    const [form] = Form.useForm()\n\n    const onFinish = values => {\n        props.changeSearch(values)\n    }\n\n    return (\n        <Form\n            {...searchLayout}\n            form={form}\n            name='advanced_search'\n            className='ant-advanced-search-form'\n            onFinish={onFinish}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Form.Item name='email' label='Email'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n                <Col span={8}>\n                    <Form.Item name='id' label='User ID'>\n                        <Input />\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                <Col span={24} style={{ textAlign: 'right' }}>\n                    <Button icon={<SearchOutlined />} type='primary' htmlType='submit' loading={props.loading}>\n                        Search\n                    </Button>\n                    <Button\n                        style={{ margin: '0 8px' }}\n                        onClick={() => {\n                            form.resetFields()\n                        }}>\n                        Reset\n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n    )\n}\n\nconst DetailModal = ({ visible, onCreate, onCancel }) => {\n    const [form] = Form.useForm()\n\n    const [user, setUser] = useState({})\n    const [allMemVisible, setAllMemVisible] = useState(false)\n\n    const layout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 14 }\n    }\n    const rangeConfig = {\n        rules: [\n            {\n                type: 'array',\n                message: 'Please select time!'\n            }\n        ]\n    }\n\n    useEffect(() => {}, [])\n\n    return (\n        <Modal\n            visible={visible}\n            title=''\n            okText='Submit'\n            cancelText='Cancel'\n            onCancel={onCancel}\n            onOk={() => {\n                form.validateFields()\n                    .then(values => {\n                        form.resetFields()\n                        onCreate(values)\n                    })\n                    .catch(info => {\n                        console.log('Validate Failed:', info)\n                    })\n            }}>\n            <Form {...layout} form={form} name='form_in_modal'>\n                <Form.Item name='status' label='status' rules={[{ required: true }]}>\n                    <Select>{StatusOptions}</Select>\n                </Form.Item>\n            </Form>\n        </Modal>\n    )\n}\n\nconst SearchTableView = props => {\n    const [state, setState] = useState({\n        list: [],\n        pagination: {\n            current: 1,\n            pageSize: 10\n        },\n        search: {},\n        loading: true,\n        visible: false,\n        disabled: false,\n        formData: {},\n        startRow: 0,\n        userId: '',\n        downloadUserUrl: ''\n    })\n    const [handleState, setHandleState] = useState({\n        visible: false,\n        data: {}\n    })\n\n    const [emailLoading, setEmailLoading] = useState({\n        loading: false,\n        id: -1\n    })\n\n    useEffect(() => {}, [])\n\n    const getList = params => {\n        const { pagination, search } = state\n        console.log('paramslist', params)\n        let apiHref = APIDownloadUserNew()\n        let json = JSON.stringify({ ...state.search })\n        let resHref = `${apiHref}?userJson=${json}`\n        setState({\n            ...state,\n            loading: true\n        })\n        APIGetUserList({ userJson: JSON.stringify(getCleanedParams(params)) })\n            .then(resp => {\n                setState({\n                    ...state,\n                    list: resp.data.list && getKeyList(resp.data.list),\n                    loading: false,\n                    startRow: resp.data.pager.start_row,\n                    visible: false,\n                    pagination: {\n                        // ...state.pagination,\n                        total: resp.data.pager.total\n                    },\n                    downloadUserUrl: encodeURI(resHref)\n                })\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n    }\n\n    const handleChange = pagination => {\n        const params = {\n            ...state.search,\n            page_size: pagination.pageSize,\n            start_row: pagination.pageSize * (pagination.current - 1)\n        }\n        getList(params)\n    }\n\n    const changeSearch = search => {\n        const params = { ...search, page_size: state.pagination.pageSize, start_row: 0 }\n        setState({\n            ...state,\n            ...search\n        })\n        getList(params)\n    }\n\n    const exportRecord = () => {\n        APIexportRewardRecord()\n            .then(xhr => {\n                return\n            })\n            .catch((err, status, xhr) => {})\n    }\n\n    const edit = data => {\n        // console.log('data', data)\n        // props.history.push({\n        //     pathname: '/userDetail',\n        //     query: { ...data }\n        // })\n        // sessionStorage.setItem('query', JSON.stringify(data))\n\n        var url = webhost + '/userDetail/' + data.id\n        var win = window.open(url, '_blank')\n        win.focus()\n    }\n\n    const changeStatus = data => {\n        console.log('changeStatus', data)\n        setState({\n            ...state,\n            visible: true,\n            userId: data.id\n        })\n    }\n\n    const sendEmail = id => {\n        console.log('id', id)\n        console.log('state', state)\n        setEmailLoading({\n            loading: true,\n            id\n        })\n        APISendActiveEmail({ id }).then(resp => {\n            message.success('success')\n            const params = { page_size: 10, start_row: state.startRow }\n            getList(params)\n            setEmailLoading({\n                ...emailLoading,\n                loading: false\n            })\n        })\n    }\n\n    const downloadUser = () => {\n        const params = {\n            start_row: state.startRow,\n            page_size: state.pagination.pageSize || 10,\n            ...state.search\n        }\n        console.log('paams', params)\n        APIDownloadUser({ userJson: JSON.stringify(params), type: 'export' }).then(resp => {})\n    }\n\n    const onCreate = data => {\n        console.log('data', data)\n        let userId = state.userId\n        APIModifyUserStatus({\n            userJson: JSON.stringify({\n                id: userId,\n                status: data.status\n            })\n        })\n            .then(resp => {\n                const params = { page_size: 10, start_row: 0, status: data.prevStatus }\n                getList(params)\n            })\n            .catch(err => {\n                console.log('err', err)\n            })\n        // APIModifyPaymentStatus({paymentJson: JSON.stringify(data)})\n        //     .then(resp => {\n        //         const params = { page_size: 10, start_row: 0, status: data.prevStatus }\n        //         getList(params)\n        //     })\n        //     .catch(err => {\n        //         console.log('err', err)\n        //     })\n    }\n\n    const createAccount = () => {\n        props.history.push('/add_user')\n    }\n\n    const batchUploadUserList = ({ file, onSuccess }) => {\n        let confirmModal = window.confirm('Please confirm info is correct')\n        if (confirmModal) {\n            APIbatchUploadUserList({ file: file }).then(resp => {\n                message.success('success')\n                const params = { start_row: 0, page_size: state.pagination.pageSize }\n                getList(params)\n            })\n        }\n    }\n\n    const rowSelection = () => {}\n\n    return (\n        <Layout className='animated fadeIn'>\n            <DetailModal\n                visible={state.visible}\n                onCreate={onCreate}\n                onCancel={() => {\n                    setState({ ...state, visible: false })\n                }}\n            />\n            <div className='web-bread-c'>\n                <WebBreadcrumb arr={['User List']} />\n                <h3>User List</h3>\n                <img src={Aset} className='aset' />\n            </div>\n            <div className='base-wr'>\n                <div className='base-style'>\n                    <SearchBar changeSearch={changeSearch} loading={state.loading} />\n                </div>\n                <Row>\n                    <Col span={24}>\n                        <div className='base-style'>\n                            <Row>\n                                <Col span={24} style={{ textAlign: 'right', marginBottom: '15px' }}>\n                                    <a\n                                        style={{\n                                            backgroundColor: '#1890ff',\n                                            color: '#fff',\n                                            padding: '8px 15px',\n                                            marginLeft: '10px'\n                                        }}\n                                        href={state.downloadUserUrl}\n                                        type='download'>\n                                        <CloudDownloadOutlined />\n                                        <span style={{ marginLeft: '5px' }}>Download User</span>\n                                    </a>\n\n                                    <Button type='primary' onClick={createAccount} style={{ marginLeft: '10px' }}>\n                                        + Create Account\n                                    </Button>\n                                    <Upload customRequest={batchUploadUserList}>\n                                        <Button style={{ marginLeft: '10px' }} icon={<UploadOutlined />}>\n                                            Click to Upload File To Create\n                                        </Button>\n                                    </Upload>\n                                </Col>\n                            </Row>\n                            <Table\n                                columns={columns(edit, changeStatus, sendEmail, emailLoading)}\n                                rowKey={record => record.key}\n                                dataSource={state.list}\n                                onChange={handleChange}\n                                rowSelection={{\n                                    type: 'checkbox',\n                                    ...rowSelection\n                                }}\n                                bordered\n                                loading={state.loading}\n                                pagination={state.pagination}\n                                scroll={{ scrollToFirstRowOnChange: true, x: 1000 }}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </Layout>\n    )\n}\n\nexport default SearchTableView\n","import EventList from './TiktokUser.jsx'\n\nexport default EventList\n"],"sourceRoot":""}